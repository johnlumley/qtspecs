:PROPERTIES:
:ID:       7FD3BEA3-E7B3-40AA-99FF-2777EFB6EA66
:END:
#+title: QT4 CG Meeting 080 Minutes 2024-06-04
#+author: Norm Tovey-Walsh
#+filetags: :qt4cg:
#+options: html-style:nil h:6 toc:2
#+html_head: <link rel="stylesheet" type="text/css" href="/meeting/css/htmlize.css"/>
#+html_head: <link rel="stylesheet" type="text/css" href="../../../css/style.css"/>
#+html_head: <link rel="shortcut icon" href="/img/QT4-64.png" />
#+html_head: <link rel="apple-touch-icon" sizes="64x64" href="/img/QT4-64.png" type="image/png" />
#+html_head: <link rel="apple-touch-icon" sizes="76x76" href="/img/QT4-76.png" type="image/png" />
#+html_head: <link rel="apple-touch-icon" sizes="120x120" href="/img/QT4-120.png" type="image/png" />
#+html_head: <link rel="apple-touch-icon" sizes="152x152" href="/img/QT4-152.png" type="image/png" />
#+options: author:nil email:nil creator:nil timestamp:nil
#+startup: showall

[[../][Meeting index]] / [[https://qt4cg.org][QT4CG.org]] / [[https://qt4cg.org/dashboard][Dashboard]] / [[https://github.com/qt4cg/qtspecs/issues][GH Issues]] / [[https://github.com/qt4cg/qtspecs/pulls][GH Pull Requests]]

* Draft Minutes (day 1 of 2)
:PROPERTIES:
:unnumbered: t
:CUSTOM_ID: minutes-1
:END:

* Summary of new and continuing actions [0/15]
:PROPERTIES:
:unnumbered: t
:CUSTOM_ID: new-actions
:END:

+ [ ] QT4CG-063-06: MK to consider refactoring the declare item type syntax to something like declare record
+ [ ] QT4CG-077-03: MK to add a note about document order across documents
+ [ ] QT4CG-077-04: MK to review inconsistencies discovered in review of #1117
+ [ ] QT4CG-078-01: MK to make the default for normalize-newlines backwards compatible.
+ [ ] QT4CG-079-01: WP to seek expert advice on hashing functions.
+ [ ] QT4CG-080-01: NW to add what the DocBook stylesheets do for this function
+ [ ] QT4CG-080-02: NW to fix issue classification so PR #1181 isn’t misclassified as an XSLT issue
+ [ ] QT4CG-080-03: MK to make a separate issue for @as on xsl:value-of
+ [ ] QT4CG-080-04: NW to revise p:invisible-xml
+ [ ] QT4CG-080-05: NW to add absolute property to the parse-uri output
+ [ ] QT4CG-080-06: NW to investigate the cross-spec reference errors in the build
+ [ ] QT4CG-080-07: NW to update the build instructions in the README
+ [ ] QT4CG-080-08: MK to work out what happened to his next-match PR
+ [ ] QT4CG-080-09: MK to address comments made on PR #832
+ [ ] QT4CG-080-10: NW to find out if we can change the community group name

* Administrivia
:PROPERTIES:
:CUSTOM_ID: administrivia
:END:

** Roll call [4/12]
:PROPERTIES:
:CUSTOM_ID: roll-call
:END:

+ [ ] Reece Dunn (RD) 
+ [ ] Sasha Firsov (SF)
+ [ ] Christian Grün (CG)
+ [ ] Joel Kalvesmaki (JK)
+ [X] Michael Kay (MK)
+ [X] Juri Leino (JLO)
+ [ ] John Lumley (JLY)
+ [ ] Dimitre Novatchev (DN)
+ [ ] Wendell Piez (WP)
+ [X] Ed Porter (EP)
+ [ ] C. M. Sperberg-McQueen (MSM)
+ [X] Norm Tovey-Walsh (NW). /Scribe/. /Chair/.

** Accept the agenda
:PROPERTIES:
:CUSTOM_ID: agenda
:END:

Proposal: Accept [[../../agenda/2024/06-04.html][the agenda]].

Accepted.

*** Status so far…
:PROPERTIES:
:CUSTOM_ID: so-far
:END:

#+CAPTION: “Burn down” chart on open issues
#+NAME:   fig:open-issues
[[./issues-open-2024-06-04.png]]

#+CAPTION: Open issues by specification
#+NAME:   fig:open-issues-by-spec
[[./issues-by-spec-2024-06-04.png]]

#+CAPTION: Open issues by type
#+NAME:   fig:open-issues-by-type
[[./issues-by-type-2024-06-04.png]]

** Approve minutes of the previous meeting
:PROPERTIES:
:CUSTOM_ID: approve-minutes
:END:

Proposal: Accept [[../../minutes/2024/05-28.html][the minutes of the previous meeting]].

Accepted.

** Next meeting
:PROPERTIES:
:CUSTOM_ID: next-meeting
:END:

The next meeting is scheduled for tomorrow.

The meeting after that is 11 June.

EP may give regrets.

** Review of open action items [1/6]
:PROPERTIES:
:CUSTOM_ID: open-actions
:END:

+ [ ] QT4CG-063-06: MK to consider refactoring the declare item type syntax to something like declare record
+ [ ] QT4CG-077-03: MK to add a note about document order across documents
+ [ ] QT4CG-077-04: MK to review inconsistencies discovered in review of #1117
+ [ ] QT4CG-078-01: MK to make the default for normalize-newlines backwards compatible.
+ [X] QT4CG-078-02: MK to update the prose of ~transient{}~ to use the word “should”.
+ [ ] QT4CG-079-01: WP to seek expert advice on hashing functions.

* Technical Agenda
:PROPERTIES:
:CUSTOM_ID: technical-agenda
:END:

** Make the agenda
:PROPERTIES:
:CUSTOM_ID: h-9EF69C1E-BBCD-440B-991A-BD648D96FF3F
:END:

+ Triage the open issues
+ Discuss open PRs
+ Planning

** Review the issues
:PROPERTIES:
:CUSTOM_ID: issues-1
:END:

+ NW: Triage into groups:
  + easy/hard
  + required/optional

Optional = if we don’t get a PR, it doesn’t stop us from finishing

In the course of review, we found several clusters of issues. We mostly marked
those “revisit”. They appear at the end of the minutes along with any discussion
we actually had about them.

*** 37, support sequence, array, and map destructuring
:PROPERTIES:
:CUSTOM_ID: iss-37
:END:
  + MK: The devil is in the details and there are a lot of details
    + … Including in the grammar
  + JLO: I’d like to have this

Some discussion of whether this is mostly about maps.

+ MK: I’m unsure about doing this for arrays
  + … It just saves a few keystrokes

Some discussion of how it would work with maps. 

+ MK: This capability is for the use case where the keys are known at compile
  time.
+ JLO: We could limit it to record destructuring?
+ MK: Yes, but that’s not really a datatype
  + … You could restrict it to just keys that are NCNames or QNames…but which is
    it?

“Hard”/”Optional”

*** 46, xsl:sequence: @as #46 
:PROPERTIES:
:CUSTOM_ID: iss-46
:END:

+ MK: I’m torn about whether this is desirable or not

“Easy”/”Optional”

*** 69, fn:document, fn:function-available: default arguments #6
:PROPERTIES:
:CUSTOM_ID: iss-69
:END:

+ MK: I think this is a bit out of date.
  + … Generally, I think there’s a need to reflect some of the changes we’ve
    made to the standard function library to make corresponding changes for the
    XSLT defined functions.

There’s no conceptual difficulty, it’s just legwork.

“Optional”/”Easy”

*** 75, Support processing HTML 5 template element content
:PROPERTIES:
:CUSTOM_ID: iss-75
:END:

We wish RD was here to explain HTML templates.

+ JLO: The content of the template element isn’t visible in the DOM. It’s used
  for instantiating something

Some attempt to understand the meaning of a template element.

+ JLO: It’s used when creating new instances.

+ MK: If this is an HTML feature, users will want to be able to create them
  through the HTML serialization method.
  + … If the parse-html function does something special, does it round-trip?

“Revisit”

*** 76, non-deterministic time
:PROPERTIES:
:CUSTOM_ID: iss-76
:END:

+ MK: It’s fairly easy if you just wave your hands about the implementation
  + … My anxiety is that someone is going to use it for timing things, then it
    gets tied in with things like lazy evaluation.
+ NW: Or have some functions that you aren’t allowed to lazily evaluate?
+ MK: The xsl:message instruction is like that, it just leaves it to
  implementations to do what makes sense
  + … But at the XPath level, it’s a lot more complicated
+ MK: You could do it in pure code by having a monitor function (scribe: as
  shown in the comment in the issue)
  + … No, that won’t work! It would evaluate the function before it started!
+ MK: The other way to do it is just with a system date-time function with a
  note to implementors that it’s useful to evaluate this eagerly.

*** 77, Allow manipulation of maps and arrays
:PROPERTIES:
:CUSTOM_ID: iss-77
:END:

PR pending.

*** 92, Simplify rule for attribute values on Extension Instructions used to invoke named templates
:PROPERTIES:
:CUSTOM_ID: iss-92
:END:

+ MK: I don’t think I want to do this. I prefer the spec as written.
  + Extension elements generally have boolean attributes, string attributes
    (usually AVTs), or expressions (typically @select).

“Revisit”

*** 105, Maps with Infinite Number of Keys: Total Maps and Decorated maps
:PROPERTIES:
:CUSTOM_ID: iss-105
:END:

+ MK: This is a hybrid of sorts between maps and functions.
  + … I think this is too difficult.

“Hard”/”Optional”

*** 106, Decorators’ support
:PROPERTIES:
:CUSTOM_ID: iss-106
:END:

One angle here is dynamic function calls taking keyword arguments that’s popped
up in several places.

After half an hour spent reviewing the proposal, the chair proposed we mark it
hard and optional.

”Hard”/“Optional”

*** 108, Template match using values of [tunnel] parameters
:PROPERTIES:
:CUSTOM_ID: iss-108
:END:

”Hard”/“Optional”

*** 111, FLWOR tracing
:PROPERTIES:
:CUSTOM_ID: iss-111
:END:

Close with no action.

*** 148, Get the type of a value
:PROPERTIES:
:CUSTOM_ID: iss-148
:END:

+ JLO: The biggest problem seems to be “what is the type of a value”? Is it
  integer or decimal?
+ MK: The type system is such a mess
  + But atomic values clearly have a type label. A function can return that.
    + There’s one complication, what to do if it is an anonymous type.
      + (If you evaluate against a schema with an anonymous type.)
      + One solution would be the nearest type up the hierarchy that has a name
  + Nodes have a well defined kind. There’s also a “content annotation”, an
    element validated against a type might be a “part number”, for example.
    + We could define a function that returned “element and part number”

Some discussion of nodes. You might also want to get the element name.

+ MK: Not many people write schema-aware XSLT or XQuery code.
  + It’s just a pain to start with.

Returning to the discussion.

+ MK: The real problem is what to do with functions, and arrays, and maps. They
  don’t have an intrisic type. An empty map belongs to an infinite number of
  types.
+ JLO: But an empty map is “map(*)”!
+ MK: For all maps, arrays, and functions, you could say all you get back is
  that it’s one of those.
+ JLO: That would be good, but you could also look into the map or array.
  + Both BaseX and in my own hack of that function, do introspection.
+ MK: I’ve no problem that it’s useful. It was defined by EXSLT for 1.0 very
  quickly.
  + … There’s plenty of evidence that it’s needed, it’s just the detail.
+ MK: The other question is what kind of result do you return?
  + Type, in principle, should be first class objects, but that’s a big step in
    terms of the data model.
+ JLO: All of the existing versions get you strings. But it could be an enum.
+ MK: I think you want it to be a structured result.
+ NW: A record with an optional qname type and an option node kind?
+ MK: Yes, I think that would be more useful than a string you have to parse.

If we limit the scope to just saying map, array, or function does that make it
easy?

“Hard”/”Optional”

*** 150, fn:ranks: Produce all ranks in applying a function on the items of a sequence
:PROPERTIES:
:CUSTOM_ID: iss-150
:END:

PR pending.

*** 158, Support optional parameters on dynamic functions
:PROPERTIES:
:CUSTOM_ID: iss-158
:END:

There are a bundle of things in this area that we keep coming back to by other
routes.

+ MK: We’ve done some of this in the function coercion rules.

“Revisit”

*** 168, XSLT Extension Instructions invoking Named Templates
:PROPERTIES:
:CUSTOM_ID: h-CF3E116F-712D-48FF-8730-5889BF14F3F0
:END:

+ MK: I think we’ve made this part of the status quo, but we don’t want to lose
  Jirka’s proposal for an extension.

We’ve asked Jirka to open a new issue for his extension.

Close this issue without further action.

*** 266 Add an option on xsl:copy-of to copy a subtree with a change of namespace
:PROPERTIES:
:CUSTOM_ID: iss-266
:END:

+ MK: Back in the age of 4GLs this was called a stereotype. There’s a general
  feature but it’s too complex for this use case. How do you define the
  boundaries?
  + … One of the motivations for this is that copy-namespaces="no" doesn’t do
    what users expect.
  + … There are all sorts of degrees of elaboration possible.
+ JLO: If I wanted tei:p output as html:p what would I do?
+ MK: You’d have to write a mode with a single template rule that matches all
  elements and changes the namespace.
+ NW: It’s certainly optional, do we want to keep it?
+ MK: Let’s abandon it.

*** 269, Function for URI relativization
:PROPERTIES:
:CUSTOM_ID: iss-269
:END:

+ NW: It looks like defining the /behavior/ is the tricky part.
+ MK: Nothing to do with URIs is easy!

ACTION: QT4CG-080-01: NW to add what the DocBook stylesheets do for this function

“Optional”/”Easy”

*** 272, Setting parameter values in xsl:use-package
:PROPERTIES:
:CUSTOM_ID: iss-272
:END:

+ MK: There are a number of issues with packages introduced in 3.0.
  + … There are only a few people using them in anger, but they’re the one’s
    finding issues.
  + … It would be nice to have more feedback.
  + … Certainly one issue is that packages can take parameters (particularly
    static parameters). If you write a package that has a parameter that’s the
    localization attributes and you then want to versions of that package in a
    stylesheet with different localization attributes, there’s no way to do that.

“Required”/”Hard”

*** 285, Stability of collections
:PROPERTIES:
:CUSTOM_ID: iss-285
:END:

There are a group of issues related to transiency

“Revisit”

(We’ve come back to this issue on the afternoon of the second day).

+ JLO: CG has a point about collection and doc being different.
+ MK: Yes, except pragmatically, in our experience, people read the same
  document many times but rarely read the same collection more than once.
  + … But maybe that’s not the case in other environments
  + … CG says he imagines doing collections over database and filestores
    differently.

Is it a database or filestore is one dimension. What’s the duration of an
execution scope is another. If an execution scope is republishing a suite of
documents, then you really don’t want be holding onto the whole collection.

+ MK: A common use case is to process the documents in the collection one at a
  time. It’s such horrible overhead to hold all of the documents just in case
  you come back to that collection again.
+ NW: It sounds like we might get consensus to relax the requirement.

This is related to the question of transiency because a transient block or
something like that would give the user the appearance of control.

Some discussion of how database and filesystem access differs.

+ MK: The issue quotes the existing text. The transient proposal doesn’t change
  that. The transient proposal gives the user an interoperable way of switching
  that off but it doesn’t change the default.
  + … For our user base, I think the default is wrong.
+ JLO: So what we want is an interoperable way to specify that.
+ EP: Would it be reasonable to change the default for XPath and not XQuery?
+ MK: We could say that the implementation must provide an option for it to be
  deterministic but that doesn’t have to be the default.

Some discussion of the use of an options parameter. That’s not necessarily
something you can know statically, but certainly the 99% case is that it will 
be a literal!

*** 296, Default namespace for elements; especially in the context of HTML
:PROPERTIES:
:CUSTOM_ID: iss-296
:END:

ACTION: QT4CG-080-02: NW to fix issue classification so PR #1181 isn’t misclassified as an XSLT issue

Some discussion of [[https://github.com/qt4cg/qtspecs/pull/1181][PR #1181]] which addresses this issue.

PR pending

*** 305, parse-xml() and whitespace stripping
:PROPERTIES:
:CUSTOM_ID: iss-305
:END:

+ MK: The whole implicit context dependencies of some functions is very
  worrying. The fact that strip-space and preserve-space apply globally is very
  unsatisfactory.

Some discussion

+ MK: These need to be options parameters on the functions (parse-xml, doc,
  etc.)

“Required”/”Hard”

*** 322, Map construction in XSLT: xsl:record instruction
:PROPERTIES:
:CUSTOM_ID: iss-322
:END:

+ NW: Looks useful to me.

“Optional”/”Easy”

*** 323, add select attribute to xsl:text
:PROPERTIES:
:CUSTOM_ID: iss-323
:END:

Some discussion of the fact that ~xsl:sequence~ isn’t intuitive but
~xsl:value-of~ returns a text node.

MK’s response in this issue is a separable issue. It’s a tangent.

ACTION: QT4CG-080-03: MK to make a separate issue for @as on xsl:value-of

With respect to @select on xsl:text, it’s hard to argue against.

“Optional”/”Easy”/

*** 332, Add a namespace uris option to fn:path
:PROPERTIES:
:CUSTOM_ID: iss-332
:END:

This seems to have garnered some support.

“Optional”/”Easy”/

*** 350, CompPath (Composite-objects path) Expressions
:PROPERTIES:
:CUSTOM_ID: iss-350
:END:

We’ve done some of this in other ways, or in other open PRs. Needs to be revised
in light of the current language.

“Optional”/”Hard”

*** 366, Support xsl:use-package with xsl:package-location
:PROPERTIES:
:CUSTOM_ID: iss-366
:END:

+ MK: One school of thought says that locating packages should be outside the
  core language. You should be able to configure where they come from without
  changing your source code. OTOH, we know from Query and Schema that it’s much
  more convenient to say where they come from inline.

“Optional”/”Easy”

*** 374, Can't view the XSD for XSLT in the browser
:PROPERTIES:
:CUSTOM_ID: iss-374
:END:

Build issue. Let NW fix it.

*** 379, Namespace handling in parse-html
:PROPERTIES:
:CUSTOM_ID: iss-379
:END:

Duplicate of 296, close with no further action.

*** 402, XSLT patterns: intersect and except
:PROPERTIES:
:CUSTOM_ID: iss-402
:END:

+ MK: I think the proposal is to break the way it’s currently defined.
  + … In the cases where it’s changing it, the existing behavior is almost
    certainly not what the user intended.

“Optional”/”Easy”

Some consideration of what it means in stylesheets with other versions. Might we
just consider it a bug fix?

*** 407, XSLT-specific context properties used in function items
:PROPERTIES:
:CUSTOM_ID: iss-407
:END:

+ MK: We have a catch-all issue that streamability of 4.0 hasn’t been addressed.

“Required”/”Easy”

*** 421, Make sure the build system syntax checks the syntax of examples
:PROPERTIES:
:CUSTOM_ID: iss-421
:END:

Build issue.

+ MK: In the 3.x builds, we had a role for examples that caused them to be
  syntactically validated.

*** 451, Multiple Schemas
:PROPERTIES:
:CUSTOM_ID: iss-451
:END:

+ MK: We allow modules to use different schemas if they’re compatible
  + … And the spec is clearer about error conditions
  + … We don’t have the ability to import incompatible schemas and validate
    against them separately.

“Optional”/”Hard”

MK observes that part of this is now possible, you can have incompatible schemas
in use provided you don’t refer to them from your query.

*** 490, Control over schema validation in parse-xml(), doc(), etc.
:PROPERTIES:
:CUSTOM_ID: iss-490
:END:

Like #305, this is about options on parse-xml, doc, etc.

“Required”/”Hard”

*** 501, Error handling: Rethrow errors; finally block
:PROPERTIES:
:CUSTOM_ID: iss-501
:END:

+ MK: Not too difficult now that we have error maps.

“Required”/”Hard”

*** 523, Dealing with component name conflicts with library packages
:PROPERTIES:
:CUSTOM_ID: iss-523
:END:

+ MK: Override with visibility hidden seems to be the same as accept with
  visibility hidden.
  + … Perhaps this is “existing callers, use this version, but I don’t want to
    call it from my package.”
  + Java doesn’t give you private overrides, do we really need this?
+ MK: I can see the need for accept with alias, but is that really needed often
  enough to justify?
+ JLO: That seems sensible enough to me, it’s “import as”.

“Optional”/”Hard”

*** 528, fn:elements-to-maps (before: Review of the fn:json() function)
:PROPERTIES:
:CUSTOM_ID: iss-528
:END:

PR pending, but the PR is out of date and there are open actions to change it.

*** 540, Add fn:system-property() to XQuery
:PROPERTIES:
:CUSTOM_ID: iss-540
:END:

This seems to have garnered some support.

“Optional”/”Easy”

*** 557, fn:unparsed-binary: accessing and manipulating binary types
:PROPERTIES:
:CUSTOM_ID: iss-557
:END:

Superseded by #1127, close without further action

*** 564, Sorted maps
:PROPERTIES:
:CUSTOM_ID: iss-564
:END:

+ MK: Might involve a data model change, that’s always difficult.

“Optional”/”Hard”

*** 566, fn:parse-uri, fn:build-uri: Feedback
:PROPERTIES:
:CUSTOM_ID: iss-566
:END:

PR pending

*** 573, Node construction functions
:PROPERTIES:
:CUSTOM_ID: iss-573
:END:

+ MK: I wanted to do it for two reasons: it’s useful to be able to use
  functions, and also to make it possible in XPath rather than only XSLT and
  XQuery.
  + … CG asks why not move the XQuery syntax into XPath
  + … I don’t like that partly because it only solves one of the problems, not the other
  + … From an XSLT perspective, wanting to keep the XPath grammar small
+ NW: I predict it will be difficult to get consensus

Some discussion of whether it should be an extension; but users don’t tend to
use extensions if there’s another way.

“Revisit”

*** 576, JSON serialization: Sequences, INF/NaN, function items
:PROPERTIES:
:CUSTOM_ID: iss-576
:END:

+ NW: It does seem bad that serialization and items-to-json behave differently.

Some discussion of the streamability consequences of serializing a sequence as
an array.

+ MK: We’re revisiting items-to-json anyway.

“Revisit”

*** 583, (array|map):replace → *:substitute or *:change
:PROPERTIES:
:CUSTOM_ID: iss-583
:END:

+ MK: My last comment is to scrap the functions and go with the update syntax

“Revisit” after the PR on update syntax.

*** 641, Serialization fallback.
:PROPERTIES:
:CUSTOM_ID: iss-641
:END:

Related to #576, marked revisit.

“Revisit”.

(We’ve come back to this issue on the afternoon of the second day).

+ MK: A common error is that you can’t use a map in document content. The
  proposal is that instead of telling you that, it gives you a document that
  contains a representation of that map.
+ NW: What about the streaming problem?
+ MK: We could have an extra serialization parameter “serialize sequence as
  array”.
+ NW: And what’s the default?

Some discussion of streaming. This isn’t specifically about XSLT streaming, it’s
about the fact that serializers often work “on the fly”.

+ MK: A JSON serializer would have to look ahead to find out if the top-level
  item was a sequence. So it’d have to buffer the *whole thing*.

With respect to serializing +Inf, -Inf, NaN, using null per the standards is
probably the right thing to do.

*** 657, User-defined functions in main modules without `local` prefix
:PROPERTIES:
:CUSTOM_ID: iss-657
:END:

+ MK: The whole point here is to avoid conflicts with system functions. You
  don’t want a query to fail just because we added a new function to the static
  context.

“Optional”/”Hard”

*** 670, The trouble with XPath‘s fn:fold-right. A fix and Proposal for fn:fold-lazy
:PROPERTIES:
:CUSTOM_ID: iss-670
:END:

Consensus: we need an actual PR for fold-lazy.

“Optional”/”Hard”

*** 675, XSLT streaming rules for new constructs
:PROPERTIES:
:CUSTOM_ID: iss-675
:END:

“Required”/”Hard”

*** 689, fn:stack-trace: keep, drop, replace with $err:stack-trace ?
:PROPERTIES:
:CUSTOM_ID: iss-689
:END:

Consensus: provide the stack trace on error, but not as a function.

“Required”/”Easy”

*** 708, Toward a design for generators
:PROPERTIES:
:CUSTOM_ID: iss-708
:END:

See #716

“Optional”/”Hard”

*** 714, Function annotations in XSLT
:PROPERTIES:
:CUSTOM_ID: iss-714
:END:

+ MK: I think I proposed this for neatness.
 
“Optional”/”Easy”

*** 716, Generators in XPath
:PROPERTIES:
:CUSTOM_ID: iss-716
:END:

See #708

“Optional”/”Hard”

*** 729, xsi:schemaLocation
:PROPERTIES:
:CUSTOM_ID: iss-729
:END:

“Required”/”Easy”

*** 735, Local functions in XSLT
:PROPERTIES:
:CUSTOM_ID: iss-735
:END:

+ MK: My preferred is named local functions.
  + … Putting all the functions first avoids hoisting and other problems.

See #745

“Optional”/”Hard”

*** 745, Support for inline (anonymous) xslt functions
:PROPERTIES:
:CUSTOM_ID: iss-745
:END:

See #735.

Close with no action.

*** 748, Parse functions: consistency
:PROPERTIES:
:CUSTOM_ID: iss-748
:END:

“Required”/”Easy”

*** 755, Expression for binding the Context Value
:PROPERTIES:
:CUSTOM_ID: iss-755
:END:

“Required”/”Hard”

*** 760, Serialize functions: consistency
:PROPERTIES:
:CUSTOM_ID: iss-760
:END:

What’s the proposal?

*** 767, parse-html(): case of SVG element names
:PROPERTIES:
:CUSTOM_ID: iss-767
:END:

+ MK: I think we determined that the case should be preserved.

“Required”/”Easy”

*** 774, What should be percent-encoded in a URI?
:PROPERTIES:
:CUSTOM_ID: iss-774
:END:

Addressed by recent changes.

*** 814, XSLT: Rules for on-no-match=\"shallow-copy-all\"
:PROPERTIES:
:CUSTOM_ID: iss-814
:END:

Superseded by #1238


*** 826, Arrays: Representation of single members of an array
:PROPERTIES:
:CUSTOM_ID: iss-826
:END:

+ MK: Some of the comments here are superseded by more recent work.
+ MK: We could get rid of array:members and array:split as user-visible functions.

“Required”/”Hard”

*** 835, Review names of record types
:PROPERTIES:
:CUSTOM_ID: iss-835
:END:

+ MK: The names are local to the spec, they don’t have any effect on queries.
  + … So it is purely editorial.

“Optional”/”Easy”

*** 850, fn:parse-html: Finalization
:PROPERTIES:
:CUSTOM_ID: iss-850
:END:

PR pending.

*** 854, Need more discussion and explanation of deep-lookup operator
:PROPERTIES:
:CUSTOM_ID: iss-854
:END:

PR Pending (#832)

*** 868, fn:intersperse → fn:join, array:join($arrays, $separator)
:PROPERTIES:
:CUSTOM_ID: iss-868
:END:

+ JLY: It’s now or never.

“Required”/”Easy”

*** 877, Inconsistency in XQFO comparator functions/operators with recursive rules
:PROPERTIES:
:CUSTOM_ID: iss-877
:END:

“Optional”/”Easy”

*** 882, fn:chain or fn:compose
:PROPERTIES:
:CUSTOM_ID: iss-882
:END:

+ MK: In some ways, this is like the discussion we had about transitive closure.
  We decided there that what most people would want and need is something that
  applies the transitive closure.
  + … What DN has pointed out here is that fn:chain is similar.
  + … I think I probably want the composition function more often.

“Optional”/”Easy”

*** 885, fn:uuid
:PROPERTIES:
:CUSTOM_ID: iss-885
:END:

+ MK: To do random numbers properly, we decided we need to have something more
  complicated.
  + … The same arguments apply to UUID.
  + … One thing that occurs to me is to add UUID as a subfunction of random
    number generator.

Some discussion of which flavors of random UUID require access to the time, and
if that could compromise the output of the random number generator.

+ NW: MK is right that we’d need ~fn:uuid-generator~ …

“Optional”/”Hard”

*** 910, Introduce a Kollection object with functions that operate on all types of items that can be containers of unlimited number of \"members\"
:PROPERTIES:
:CUSTOM_ID: iss-910
:END:

“Optional”/”Hard”

*** 917, Better support for typed maps
:PROPERTIES:
:CUSTOM_ID: iss-917
:END:

“Optional”/”Hard”

*** 920, The rules for the \"tail position\" of a sequence constructor need to take account of xsl:switch
:PROPERTIES:
:CUSTOM_ID: iss-920
:END:

PR pending

*** 938, Canonical serialization
:PROPERTIES:
:CUSTOM_ID: iss-938
:END:

“Optional”/”Easy”

*** 954, Establish a default value for the XSLT fixed-namespaces attribute
:PROPERTIES:
:CUSTOM_ID: iss-954
:END:

Close without further action

*** 955, Options parameters as record types
:PROPERTIES:
:CUSTOM_ID: iss-955
:END:

Close without further action

*** 959, Milliseconds ↔ xs:dayTimeDuration, Unix time ↔ xs:dateTime
:PROPERTIES:
:CUSTOM_ID: iss-959
:END:

“Optional”/”Easy”

*** 967, XPath Appendix I: Comparisons
:PROPERTIES:
:CUSTOM_ID: iss-967
:END:

“Required”/”Easy”

*** 981, Identify optional arguments in callback functions
:PROPERTIES:
:CUSTOM_ID: iss-981
:END:

“Optional”/”Easy”

*** 982, Add position argument to scan-left and scan-right
:PROPERTIES:
:CUSTOM_ID: iss-982
:END:

+ MK: We have to do this, we can’t leave one function that’s different from all
  the others.

“Required”/”Easy”

*** 986, Numeric Comparisons
:PROPERTIES:
:CUSTOM_ID: iss-986
:END:

This is roughly a duplicate of #967.

“Required”/”Easy”

*** 991, Invisible-xml - missing details
:PROPERTIES:
:CUSTOM_ID: iss-991
:END:

ACTION: QT4CG-080-04: NW to revise p:invisible-xml

*** 998, regular expression addition - lookbehind assertions and lookahead assertions
:PROPERTIES:
:CUSTOM_ID: iss-998
:END:

“Optional”/”Hard”

*** 1006, regular expression addition - word boundaries
:PROPERTIES:
:CUSTOM_ID: iss-1006
:END:

“Optional”/”Hard”

*** 1011, fn:transform() improvements
:PROPERTIES:
:CUSTOM_ID: iss-1011
:END:

“Required”/”Hard”

*** 1013, [XSLT] Need to say what happens when a capturing accumulator rule matches a non-element node
:PROPERTIES:
:CUSTOM_ID: iss-1013
:END:

PR pending

*** 1014, Predicates, sequences of numbers: Feedback
:PROPERTIES:
:CUSTOM_ID: iss-1014
:END:

+ MK: Under CG’s proposal, an untyped atomic is problematic. If you say, if the
  first thing in the sequence is a number, then everything else is coerced to a
  number, you get some quite strange results.

“Required”/”Easy”

*** 1021, Extend `fn:doc`, `fn:collection` and `fn:uri-collection` with options maps
:PROPERTIES:
:CUSTOM_ID: iss-1021
:END:

Related to other issues about having options arguments for these functions.

“Required”/”Hard”

*** 1026, XSLT match patterns on pinned maps and arrays
:PROPERTIES:
:CUSTOM_ID: iss-1026
:END:

“Optional”/”Hard”

*** 1035, Add default values for parameters in constructor functions for records
:PROPERTIES:
:CUSTOM_ID: iss-1035
:END:

“Optional”/”Hard”

*** 1045, Functions to manage namespace usage
:PROPERTIES:
:CUSTOM_ID: iss-1045
:END:

“Required”/”Hard”

*** 1048, fn:format-number: relax restrictions on exponent-separator (possibly minus-sign, percent, per-mille)
:PROPERTIES:
:CUSTOM_ID: iss-1048
:END:

PR pending

*** 1055, xsl:variable/@as - simplifying the language - attempt 2
:PROPERTIES:
:CUSTOM_ID: iss-1055
:END:

We just don’t think this is something we are prepared to do.

*** 1065, fn:format-number: further notes
:PROPERTIES:
:CUSTOM_ID: iss-1065
:END:

+ MK: The ~fn:format-number~ function has always been context independent.

“Optional”/”Hard”

*** 1069, fn:ucd
:PROPERTIES:
:CUSTOM_ID: iss-1069
:END:

Useful functionality. But will it be hard to implement efficiently?

“Optional”/”Hard”

*** 1085, Parameters to fn:sort
:PROPERTIES:
:CUSTOM_ID: iss-1085
:END:

“Optional”/”Hard”

*** 1096, Effect of atomization on array:index-of()
:PROPERTIES:
:CUSTOM_ID: iss-1096
:END:

“Required”/”Easy”/

*** 1103, CSV Parsing - handling line ending normalization
:PROPERTIES:
:CUSTOM_ID: iss-1103
:END:

“Revisit”, CG isn’t present.

*** 1111, xsl:pipeline
:PROPERTIES:
:CUSTOM_ID: iss-1111
:END:

“Optional”/”Hard”

*** 1114, Partial function application: Keywords and placeholders
:PROPERTIES:
:CUSTOM_ID: iss-1114
:END:

“Revisit”, CG isn’t present.

*** 1119, Declare namespace bindings in XPath
:PROPERTIES:
:CUSTOM_ID: iss-1119
:END:

Some discussion of the issue; making the XPath prolog a separable
part of the language might be useful.

Close without action.

*** 1124, Formatting XPath/XQuery: Preferences, Conventions
:PROPERTIES:
:CUSTOM_ID: iss-1124
:END:

Editorial. Not discussed at the f2f.

*** 1127, Binary resources
:PROPERTIES:
:CUSTOM_ID: iss-1127
:END:

“Required”/”Easy”

(Doing the easy parts is easy!)

*** 1136, Defining names for parameters on typed function tests
:PROPERTIES:
:CUSTOM_ID: iss-1136
:END:

Part of the nexus of issues about arguments to dynamic functions.

“Revisit”

*** 1153, XSLT: debugging template rule selection
:PROPERTIES:
:CUSTOM_ID: iss-1153
:END:

“Optional”/”Easy”

*** 1158, Simple mapping operator for arrays
:PROPERTIES:
:CUSTOM_ID: iss-1158
:END:

“Required”/”Easy”

*** 1160, fn:is-collation-available
:PROPERTIES:
:CUSTOM_ID: iss-1160
:END:

“Optional”/”Easy”

* End-of-day wrapup
:PROPERTIES:
:CUSTOM_ID: wrap-up-1
:END:

** Roll call [3/3]
:PROPERTIES:
:CUSTOM_ID: roll-call-wrapup
:END:

Face-to-face participants and:

+ [X] Christian Grün (CG)
+ [X] Joel Kalvesmaki (JK)
+ [X] Dimitre Novatchev (DN)

** Notes 
:PROPERTIES:
:CUSTOM_ID: wrap-up-notes-1
:END:

+ DN: I’m waiting on records to finish my proposals for fold-lazy, kollections,
  and generators
+ MK: I think what we have for records is complete and consistent, but there are
  some ideas for enhancements that are still open.
  + Adding defaults for constructors
  + The most difficult issue raised is whether to promote records from purely a
    predicate applied to maps to being some kind of labeled item type.
  + It’s a fairly substantive data model change and could be disruptive.

(MK’s audio was hard to hear on the phone, apologies.)

+ DN: Look at how Python deals with variadic options for anonymous functions.
+ NW: We didn’t make progress on that issue because it’s part of a cluster.

+ ED: We could review the close without action group.

NW projects the list.

+ MK: Some of these are covered by other issues.

+ DN: What about adding milestones?
+ NW: If that seems practical

+ JK: I can’t make tomorrow’s meeting. I’m looking at the list of PRG-required.


* Draft Minutes (day 2 of 2)
:PROPERTIES:
:unnumbered: t
:CUSTOM_ID: minutes-2
:END:

Present: MK, JLO, EP, NW, and Jirka Kosek.

** Review the issues
:PROPERTIES:
:CUSTOM_ID: issues-2
:END:

*** 1161, More changes to drop the requirement for document-uri() uniqueness
:PROPERTIES:
:CUSTOM_ID: iss-1161
:END:

“Required”/”Easy”

*** 1169, Maps & Arrays: Consistency & Terminology
:PROPERTIES:
:CUSTOM_ID: iss-1169
:END:

“Required”/”Hard”

*** 1175, XPath: Optional parameters in the definition of an inline function
:PROPERTIES:
:CUSTOM_ID: iss-1175
:END:

“Revisit”

*** 1176, Use fn:parse-uri to check whether a filepath is relative or absolute
:PROPERTIES:
:CUSTOM_ID: iss-1176
:END:

“Optional”/”Easy”

ACTION: QT4CG-080-05: NW to add absolute property to the parse-uri output

*** 1179, Editorial: `array:values`, `map:values`
:PROPERTIES:
:CUSTOM_ID: iss-1179
:END:

See issue #1169 and PR #1185.

“Revise”

*** 1183, transient() - a function to make functions nondeterministic
:PROPERTIES:
:CUSTOM_ID: iss-1183
:END:

“Revise”

*** 1187, Decimal rounding
:PROPERTIES:
:CUSTOM_ID: iss-1187
:END:

+ MK: We have half-to-even but we don’t have the other modes.
  + You can usually wangle it by negating, rounding, etc. But it’s a kludge.
+ NW: This is preventing real users from getting the results they need.

“Required”/”Easy”

*** 1193, Parsing Functions: Empty input
:PROPERTIES:
:CUSTOM_ID: iss-1193
:END:

+ MK: I think the last time we looked at this in 3.x, we agreed that most
  functions have a “principle argument”, the first argument, and it makes sense
  to allow that and return an empty sequence.
  + … There are other conflicting positions, for example that empty sequences to
    string functions give the empty string.

PR pending

*** 1194, New function fn:query()
:PROPERTIES:
:CUSTOM_ID: iss-1194
:END:

“Optional”/”Hard”

*** 1202, XQFO: Rendering of new/updated functions
:PROPERTIES:
:CUSTOM_ID: iss-1202
:END:

“Required”/”Easy”

*** 1216, Detailed comments on math:e, sinh(), cosh(), tanh()
:PROPERTIES:
:CUSTOM_ID: iss-1216
:END:

PR pending

*** 1224, Attribute priority for xsl:accumulator-rule
:PROPERTIES:
:CUSTOM_ID: iss-1224
:END:

+ MK: I think I’m persuaded.

“Optional”/”Easy”

*** 1225, Generalization of Deep Updates
:PROPERTIES:
:CUSTOM_ID: iss-1225
:END:

+ JLO: There’s an extension to XQuery Update in eXist DB that looks like the new
  map and array syntax.
+ MK: It’s obviously desirable, but the prospect of taking on XQuery Update is
  daunting.
  + … Partly because of issues of consensus on the 3.x specifications.
  + … You could decide that it was a false start and go back to the 1.0 spec.

“Optional”/”Hard”

*** 1234, Seralization Parameters: Indentation, Whitespace, Newlines
:PROPERTIES:
:CUSTOM_ID: iss-1234
:END:

“Optional”/”Easy”

*** 1235, Function Identity: Treating function items with identical bodies
:PROPERTIES:
:CUSTOM_ID: iss-1235
:END:

+ MK: This has always been a pretty sore area. If you call a function that calls
  a function that calls a function that calls generate-id, are you allowed to
  pull that function out of a loop?
  + … It’s hard to maintain function identity in all case.

“Required”/”Hard”

*** 1236, QT4CG-078-01 fn:unparsed-text-lines, normalize newlines
:PROPERTIES:
:CUSTOM_ID: iss-1236
:END:

“Optional”/”Easy”

*** 1238, XSLT on-no-match=\"shallow-copy-all\" - revised rules
:PROPERTIES:
:CUSTOM_ID: iss-1238
:END:

“Required”/”Easy”

*** 1239, XSLT xsl:next-match with select attribute
:PROPERTIES:
:CUSTOM_ID: iss-1239
:END:

+ MK: It needs working through. I hit it with arrays, where I wanted to sort the
  array and then carry on.

“Optional”/”Hard”

*** 1240, $sequence-of-maps ? info()
:PROPERTIES:
:CUSTOM_ID: iss-1240
:END:

+ NW: Does the presence of this ugly gotcha raise this to the level of required?
+ MK: I think so.

“Required”/”Hard”

*** 1241, Node constructor vs. otherwise/map constructor
:PROPERTIES:
:CUSTOM_ID: iss-1241
:END:

“Required”/”Easy”

*** 1245, fn:format-dateTime: Properties
:PROPERTIES:
:CUSTOM_ID: iss-1245
:END:

“Required”/”Easy”

*** 1246, fn:json-to-xml: `number-parser` option
:PROPERTIES:
:CUSTOM_ID: iss-1246
:END:

“Required”/”Easy”

*** 1247, `??type(T)` in lookup expressions - shortcuts
:PROPERTIES:
:CUSTOM_ID: iss-1247
:END:

“Optional”/”Easy”

*** 1248, for member allowing empty
:PROPERTIES:
:CUSTOM_ID: iss-1248
:END:

PR prending

*** 1251, Allow sequence constructor in extension instructions that are implemented with named templates
:PROPERTIES:
:CUSTOM_ID: iss-1251
:END:

+ MK: That’s not the only possible interpretation, but it seems a reasonable
  default.

“Optional”/”Easy”















** Review of PRs
:PROPERTIES:
:CUSTOM_ID: review-prs
:END:

Two are tagged “merge without discussion”, we’ll merge those. Any that we agree
should be merged we’ll mark as “propose to merge without discussion” for the
next meeting. That’ll give the whole group an opportunity to see what’s planned
before we do it.

*** 1233 Major edits to fn:chain, clarification only
:PROPERTIES:
:CUSTOM_ID: pr-1233
:END:

Merged without discussion.

*** 1230 1216 Detailed comments on math:e, sinh(), cosh(), tanh()
:PROPERTIES:
:CUSTOM_ID: pr-1230
:END:

Merged without discussion.

*** 1250 1048 Extended decimal format properties
:PROPERTIES:
:CUSTOM_ID: pr-1250
:END:

Agreed.

*** 1249 31 Introduce "for key $k value $v in $map"
:PROPERTIES:
:CUSTOM_ID: pr-1249
:END:

+ MK: There are some sections that have been moved around so that we can align
  the grammar between XPath and XQuery.
+ MK: We’re a bit looser these days about what it means to compare two QNames,
  we used to spell it out very precisely everywhere.

*** 1244 566-partial Rewrite parse-uri
:PROPERTIES:
:CUSTOM_ID: pr-1244
:END:

Wait until NW and CG agree that the prose and the tests are consistent and
correct.

*** 1231 1193 Parsing Functions: Empty input
:PROPERTIES:
:CUSTOM_ID: pr-1231
:END:

Blocked. (The build failed.)

*** 1228 – Adding the BLAKE3 hashing algorithm to fn:hash
:PROPERTIES:
:CUSTOM_ID: pr-1228
:END:

+ MK: We have a responsibility because it will seen as an endorsement.

Wait for WP to provide more background information.

*** 1227 150 PR resubmission for fn ranks
:PROPERTIES:
:CUSTOM_ID: pr-1227
:END:

+ MK: Having two different collations seems impractical. Either that’s
  unnecessary or I don’t understand what the function is for.
+ NW: I took that to mean just what it appears to say, that you have a collation
  for the keys and a different collation for the items.
+ JLO: I thought we said that the collations could be made part of the functions.

Some discussion of how the use case (the football scores) could be done today.

+ MK: My mental model is you sort by the key and the partition. It’s a variant
  of sort that delivers a partitioned result.
  + … So why on earth do you need two collations?
+ JLO: Could this be done with ~fn:sort~ and ~fn:partition~?
+ MK: Yes, but you might have to evaluate the sort key twice.

Some discussion of whether that could be avoided by passing in tuples.

Some discussion about whether or not the Swedish collation in the language
example is doing anything.

Finding anagrams doesn’t appear to require ~fn:ranks~, you could just group on
the constructed character/frequency string.

We look briefly at MK’s formulation.

+ MK: It’s basically sort followed by partition.
+ EP: The only difference is that you don’t have two collations?
+ MK: I’m not sure because I haven’t tried to address the boolean parameter
  about duplicates.

Some discussion of dealing with duplicates. For simple cases, you could remove
them from the input. Where that wasn’t possible, you’d have to post-process.

+ MK: What is missing from this formulation that is in DN’s presentation?
+ JLO: The ability to make distinct values.
+ MK: Then maybe that should be added to sort?
  + … Why should the way ~fn:ranks~ behave differently than ~fn:sort~ with
    respect to duplicates?

Unclear how to proceed.

*** 1209 1183 Add transient mode and the transient{} expression
:PROPERTIES:
:CUSTOM_ID: pr-1209
:END:

MK made the requested change. Needs to be reviewed again.

*** 1185 1179 array:values, map:values → array:get, map:get
:PROPERTIES:
:CUSTOM_ID: pr-1185
:END:

+ MK: Are we sure this isn’t recursive? That ~?*~ isn’t defined in terms of ~map:get()~?

No, that’s not the case. (We checked.)

+ MK: Okay, the design works. But do we like it? It means there’s one function
  that does two very different things.
+ NW: I’m not a huge fan, I think it hinders discoverability. I go looking for
  functions to get the keys and values out of a map, I’ll find ~map:keys~ but
  not ~map:values~. So I have to write that myself? It might be a while before I
  thought of having ~map:get(())~ do it.
+ JLO: If I’m using an expression for the argument to ~map:get~ and I
  accidentally use an empty sequence, I’m going to get wildly different results.
  + … Why is ~values~ so bad?
+ MK: In many ways I prefer the status quo.

We don’t seem to have consensus for this change.

*** 1181 296 Allow default-namespace=##any
:PROPERTIES:
:CUSTOM_ID: pr-1181
:END:

+ JLO: Why ~##any~?
+ MK: Following the convention for XSD, using a string with ## in it shouldn’t
  be used as a namespace.

In the XSLT spec:

+ MK: We’ve reverted the change that made element and type namespaces different.
  There’s a change here that corrects an error where we failed to do that.

*** 1062 150bis - revised proposal for fn:ranks
:PROPERTIES:
:CUSTOM_ID: pr-1062
:END:

See discussion of ~fn:ranks~ above.

*** 1015 1013 [XSLT] Clarify effect of accumulator capture on non-element nodes
:PROPERTIES:
:CUSTOM_ID: pr-1015
:END:

Accepted.

*** 0956 850-partial Editorial improvements to parse-html()
:PROPERTIES:
:CUSTOM_ID: pr-956
:END:

It appears that there might be a rebasing problem.

(MK rebased and pushed.)

+ NW: Looks fine to me.

Some discussion of the (dis)similarity of JSON parsing mandated by the fact that
unparsed-text must reject non-XML characters.

+ JLO: Is there an HTML version of ~html-doc~?
+ MK: No.

Agreement that it should be raised, JLO will do so.

ACTION: QT4CG-080-06: NW to investigate the cross-spec reference errors in the build

ACTION: QT4CG-080-07: NW to update the build instructions in the README

Accepted.

*** 0921 920 Allow xsl:break and xsl:next-iteration within branch of xsl:switch
:PROPERTIES:
:CUSTOM_ID: pr-921
:END:

Accepted.

*** 0871 Action qt4 cg 027 01 next match
:PROPERTIES:
:CUSTOM_ID: pr-871
:END:

ACTION: QT4CG-080-08: MK to work out what happened to his next-match PR


*** 0832 77 Add map:deep-update and array:deep-update
:PROPERTIES:
:CUSTOM_ID: pr-832
:END:

+ NW: In this note:

   These rules affect the way an xs:untypedAtomic key value is handled. Given
   the shallow lookup expression $A?$x, if $A is an array and $x (after
   atomization) is xs:untypedAtomic then the value of $x is converted to an
   integer (by virtue of the coercion rules applying to a call on array:get).
   With a deep lookup expression $A??$x, by contrast, the semantics are defined
   in terms of a map lookup, in which xs:untypedAtomic values are always treated
   as strings.

   Is the reference to ~array:get~ correct? (Is the note correct overall?)

+ NW: ~fn:selection:path~ should be ~fn:selection-path~
+ MK: Allowing a sequence in ~UpdateExpr~ causes a grammar ambiguity
+ JLO: ~ExtendClause~ is missing from the definition of ~UpdateClause~

Some discussion of the ambiguity. For a single clause leave out the curly braces:

#+begin_src
  update map $data …
#+end_src

For multiple clauses use the curly braces but precede by ~do~.

+ MK: Needs another pass, but we’re getting there.
  + … What I quite like about it is that most users won’t need to worry about
    most complexities. The syntax is reasonably intuitive. Users will be able to
    use the expressions without a deep understanding of the semantics.

ACTION: QT4CG-080-09: MK to address comments made on PR #832

*** 0529 528 fn:elements-to-maps
:PROPERTIES:
:CUSTOM_ID: pr-529
:END:

Needs revision, come back to later.

** Closely related issues
:PROPERTIES:
:CUSTOM_ID: closely-related
:END:

*** Variable arity dynamic functions
:PROPERTIES:
:CUSTOM_ID: variable-arity-dynamic-functions
:END:

+ 158, Support optional parameters on dynamic functions
+ 1136, Defining names for parameters on typed function tests
+ 1175, XPath: Optional parameters in the definition of an inline function

MK observes that the primary obstacle is argument names.

+ MK: If you declare a function with keyword arguments ~x~, ~y~, ~z~, and you
    pass it to a another function as an argument where the expected names are
    ~p~, ~q~, and ~r~, what happens?
  + … There have been lots of suggestions that we’d like the names of the
    parameters to be a lot more visible. Perhaps starting in the function type.
  + … The purpose is for the caller of the function to call arguments by name.
  + … Where does that come from? If it’s in the author’s declaration then you
    can’t pass ~x~, ~y~, ~z~ if ~p~, ~q~, and ~r~, are expected.
  + … I don’t want to constrain the caller of the function to use the same name
    as the recipient.
  + … If function coercion changes the names, how does that work.

Some discussion of what’s different here. It’s about dynamic evaluation, not
whether or not the function was declare statically.

(Note to readers: the code examples were constructed on the fly while being
projected. It’s likely that intermediate stages have been lost.)

#+begin_src
declare local:add($v1, $v2, $rounding-mode:="normal") {…}
declare local:sub($a, $b) {…}

add(v2:=3, v1:=1)
add(1,3)

let $partial := local:add(1, ?)
$partial(v2=3) (: error :)

declare local:higher-order($op, $f as function(xs:double, xs:double)) {
  $f(2, 3) (: ok :)
  $f(v1=2, v2=3)  (: wat? :)
}

local:higher-order(3, local:add#2)
local:higher-order(3, local:sub#2)

declare local:higher-order($op, $f as function($x as xs:double, $y as xs:double)) {
(:  $f(2, 3) (: ok :)
  $f(x=2, y=3)  (: ok :)

  let $g := $f(y=?, x=3)
:)
  $op => $f(x=2)
}

add(v2=7, v1=14)
#+end_src

+ MK: Keyword arguments allow you to change the argument order in dynamic function calls.
  + … Optional parameters can only be called with keywords, and keyword
    parameters must be optional. They are always implicitly passed through by
    names.
  + … If you declare a function with an optional, keyword based ~$collation~
    parameter, it passes through silently and can be called by its original
    name.
+ JLO: But then you can’t ask “does this function have a collation argument?”
+ MK: You could provide an interogative to ask.
  + … But then you can’t pass an option statically because you can’t know
    statically!
+ MK: It’s much more like passing an options map where the names are dynamic.

#+begin_src
declare local:add($v1, $v2, $rounding-mode:="normal") { ... }
declare local:sub($v1, $v2) { ... }

declare local:higher-order($op, $f as function($x as xs:double, $y as xs:double)) {
  $f(1, 2)
  $f(1, 2, rounding-mode:="special")
}

local:higher-order(3, local:add#2) (: function works :)
local:higher-order(3, local:sub#2) (: dynamic error in the second call to $f in higher-orde: :)
#+end_src

+ MK: Instead of binding $rounding-mode to it’s default when you create the
  closure, you allow it to be passed through by name.

+ NW: I don’t think we’re making improvements…

Looking at the example from issue #1175:

Let’s extend it so that data flow analysis won’t answer the question “is
increment correct”?

#+begin_src
let $incr := if ($random)
             then fn($arg1, $increment := 1) {$arg1 + $increment }
             else fn($arg1, $decrement := 1) {$arg1 - $decrement }
 return
  (
   $incr(5),
   $incr(5, increment := 2),
   $incr(5, increment := 3)
 )
#+end_src

Presumably this raises a dynamic error when ~$random~ is false. It’s impossible
to know statically what will happen.

+ MK: It’s very much like an options argument on every function and the binding
  of keyword parameters was creating a binding for that option. In which case it
  might not be an error. You’d just be supplying an option the function doesn’t use.

Consensus in the room is that keyword arguments on dynamic function calls
doesn’t work.

*** Terminology: map and array functions
:PROPERTIES:
:CUSTOM_ID: terminology
:END:

+ 1169, Maps & Arrays: Consistency & Terminology
+ 1179, Editorial: `array:values`, `map:values`

*** Terminology: parse functions
:PROPERTIES:
:CUSTOM_ID: function-name-consistency
:END:

+ 748, Parse functions: consistency
+ 1021, Extend `fn:doc`, `fn:collection` and `fn:uri-collection` with options maps
+ 1252, Add a new function fn:html-doc

*** Transiency
:PROPERTIES:
:CUSTOM_ID: transiency
:END:

+ 285, Stability of collections
+ 1183, transient() - a function to make functions nondeterministic
+ 1209, 1183 Add transient mode and the transient{} expression


** Planning?
:PROPERTIES:
:CUSTOM_ID: h-872DD948-C3D3-42C0-9958-B67FD5CA55B7
:END:

+ When will we be done?
  + Unclear. This is probably the first step.
+ What will we publish?
  + W3C community group final reports
+ Do we want an umbrella page?
  + Yes, probably
+ Do we want to change the name of the community group?
  + XSLT and XQuery Extensions Community Group
  + Update the group abstract

ACTION: QT4CG-080-10: NW to find out if we can change the community group name

+ Do we need to manage completion of the test suite?
  + Probably. Even if the W3C doesn’t require it, we want to know we have good
    coverage and a couple of implementations of every feature.
+ We’ll do all the specifications at once
+ Do we have a contact at the W3C?
  + Not a specific individual, but NW has found sysreq and webreq to be
    responsive.

* End-of-day wrapup
:PROPERTIES:
:CUSTOM_ID: wrap-up-2
:END:

** Roll call [4/4]
:PROPERTIES:
:CUSTOM_ID: roll-call-wrapup
:END:

Face-to-face participants and:

+ [X] Christian Grün (CG)
+ [X] John Lumley (JLY)
+ [X] Dimitre Novatchev (DN)
+ [X] C. M. Sperberg-McQueen (MSM)

** Notes 
:PROPERTIES:
:CUSTOM_ID: wrap-up-notes-2
:END:

Some discussion of serializing JSON. Would implementing json-lines help with the
case of serializing a top-level sequence of JSON items?

+ CG: Would using item separator help?
+ MK: Item separator is incredibly troublesome. The introduction of item
  separator changes the boundary between what the query outputs and what the
  serializer does. We certainly found it disruptive in implementation terms.

Some discussion of how this might interact with other options and whether you’d
get multiple newlines sometimes?

*** 1181 discussion
:PROPERTIES:
:CUSTOM_ID: pr-1181-2
:END:

CG points us to [[https://github.com/qt4cg/qtspecs/pull/1181#pullrequestreview-2035405118][his comment]] about using an ~any~ keyword in XQuery.

+ MK: I don’t feel strongly about it one way or the other.

+ MK: We’re very fuzzy about what strings are acceptable as namespaces.

*** Variadic functions
:PROPERTIES:
:CUSTOM_ID: h-040021CE-C4E8-4199-B05E-0C30C26C223C
:END:

DN asserts that we need support for map-variadic functions.

MK says that the it isn’t the case because function items can’t be variadic, so
you can’t pass them to apply.

+ DN: Right now, I think ~fn:apply~ can take any function. But that’s not the case?
+ MK: No, at the moment, you can pass any function item to ~fn:apply~ and
  /function items/ can’t be variadic currently!
+ DN: I think we see the problem here, we need to do something about it.

* Thank our host
:PROPERTIES:
:CUSTOM_ID: thank-you-jirka
:END:

Thank you, Jirka.

* Any other business
:PROPERTIES:
:CUSTOM_ID: any-other-business
:END:

None heard.

* Adjourned
:PROPERTIES:
:CUSTOM_ID: adjourned
:END:
