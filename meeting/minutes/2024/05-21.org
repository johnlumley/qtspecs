:PROPERTIES:
:ID:       FE3D5F06-3C9B-4116-AF7F-6D6EBF0A30C9
:END:
#+title: QT4 CG Meeting 078 Minutes 2024-05-21
#+author: Norm Tovey-Walsh
#+filetags: :qt4cg:
#+options: html-style:nil h:6
#+html_head: <link rel="stylesheet" type="text/css" href="/meeting/css/htmlize.css"/>
#+html_head: <link rel="stylesheet" type="text/css" href="../../../css/style.css"/>
#+html_head: <link rel="shortcut icon" href="/img/QT4-64.png" />
#+html_head: <link rel="apple-touch-icon" sizes="64x64" href="/img/QT4-64.png" type="image/png" />
#+html_head: <link rel="apple-touch-icon" sizes="76x76" href="/img/QT4-76.png" type="image/png" />
#+html_head: <link rel="apple-touch-icon" sizes="120x120" href="/img/QT4-120.png" type="image/png" />
#+html_head: <link rel="apple-touch-icon" sizes="152x152" href="/img/QT4-152.png" type="image/png" />
#+options: author:nil email:nil creator:nil timestamp:nil
#+startup: showall

[[../][Meeting index]] / [[https://qt4cg.org][QT4CG.org]] / [[https://qt4cg.org/dashboard][Dashboard]] / [[https://github.com/qt4cg/qtspecs/issues][GH Issues]] / [[https://github.com/qt4cg/qtspecs/pulls][GH Pull Requests]]

* Draft Minutes
:PROPERTIES:
:unnumbered: t
:CUSTOM_ID: minutes
:END:

* Summary of new and continuing actions [2/8]
:PROPERTIES:
:unnumbered: t
:CUSTOM_ID: new-actions
:END:

+ [ ] QT4CG-063-06: MK to consider refactoring the declare item type syntax to something like declare record
+ [ ] QT4CG-071-06: NW to clarify the cases that are distinguished by the leading empty string in path segments
+ [ ] QT4CG-072-03: NW to clarify the round-tripping of URIs
+ [ ] QT4CG-077-03: MK to add a note about document order across documents
+ [ ] QT4CG-077-04: MK to review inconsistencies discovered in review of #1117
+ [ ] QT4CG-078-01: MK to make the default for normalize-newlines backwards compatible.
+ [ ] QT4CG-078-02: MK to update the prose of ~transient{}~ to use the word ‚Äúshould‚Äù.

* Administrivia
:PROPERTIES:
:CUSTOM_ID: administrivia
:END:

** Roll call [8/12]
:PROPERTIES:
:CUSTOM_ID: roll-call
:END:

RD, EP gives regrets. JLY gives regrets for three weeks.

+ [ ] Reece Dunn (RD) 
+ [X] Sasha Firsov (SF)
+ [X] Christian Gr√ºn (CG)
+ [ ] Joel Kalvesmaki (JK)
+ [X] Michael Kay (MK)
+ [X] Juri Leino (JLO)
+ [ ] John Lumley (JLY)
+ [X] Dimitre Novatchev (DN)
+ [X] Wendell Piez (WP) [:15-]
+ [ ] Ed Porter (EP)
+ [X] C. M. Sperberg-McQueen (MSM)
+ [X] Norm Tovey-Walsh (NW). /Scribe/. /Chair/.

** Accept the agenda
:PROPERTIES:
:CUSTOM_ID: agenda
:END:

Proposal: Accept [[../../agenda/2024/05-21.html][the agenda]].

Accepted.

*** Status so far‚Ä¶
:PROPERTIES:
:CUSTOM_ID: so-far
:END:

#+CAPTION: ‚ÄúBurn down‚Äù chart on open issues
#+NAME:   fig:open-issues
[[./issues-open-2024-05-21.png]]

#+CAPTION: Open issues by specification
#+NAME:   fig:open-issues-by-spec
[[./issues-by-spec-2024-05-21.png]]

#+CAPTION: Open issues by type
#+NAME:   fig:open-issues-by-type
[[./issues-by-type-2024-05-21.png]]

** Approve minutes of the previous meeting
:PROPERTIES:
:CUSTOM_ID: approve-minutes
:END:

Proposal: Accept [[../../minutes/2024/05-14.html][the minutes of the previous meeting]].

Accepted.

** Next meeting
:PROPERTIES:
:CUSTOM_ID: next-meeting
:END:

The next meeting [[../../agenda/2024/05-28.html][is scheduled for Tuesday, 28 May 2024]].

MK gives regrets. JLY gives regrets for two more weeks.

** Review of open action items [3/8]
:PROPERTIES:
:CUSTOM_ID: open-actions
:END:

+ [ ] QT4CG-063-06: MK to consider refactoring the declare item type syntax to something like declare record
+ [ ] QT4CG-071-06: NW to clarify the cases that are distinguished by the leading empty string in path segments
+ [ ] QT4CG-072-03: NW to clarify the round-tripping of URIs
+ [X] QT4CG-073-01: NW to proceed with the records/options proposal and make a PR.
+ [X] QT4CG-077-01: DN to create an issue for adding Blake-3.
+ [X] QT4CG-077-02: JK to correct the reference to TR29.
+ [ ] QT4CG-077-03: MK to add a note about document order across documents
+ [ ] QT4CG-077-04: MK to review inconsistencies discovered in review of #1117

** Review of open pull requests and issues
:PROPERTIES:
:CUSTOM_ID: open-pull-requests
:END:

*** Merge without discussion
:PROPERTIES:
:CUSTOM_ID: merge-without-discussion
:END:

The following PRs are editorial, small, or otherwise appeared to be
uncontroversial when the agenda was prepared. The chairs propose that
these can be merged without discussion. If you think discussion is
necessary, please say so.

+ PR [[https://qt4cg.org/dashboard/#pr-1223][#1223]]: Minor: fixed URL
+ PR [[https://qt4cg.org/dashboard/#pr-1222][#1222]]: 1214: hash examples
+ PR [[https://qt4cg.org/dashboard/#pr-1220][#1220]]: 73 copy&paste typo in fn:graphemes (combining diaeresis should be ZWJ)

Proposal: Merge with discussion.

Accepted.

*** Close without action
:PROPERTIES:
:CUSTOM_ID: close-without-action
:END:

It has been proposed that the following issues be closed without action.
If you think discussion is necessary, please say so.

+ Issue [[https://github.com/qt4cg/qtspecs/issues/652][#652]]: Defining a common function library for XPath, XSLT, and XQuery applications
+ Issue [[https://github.com/qt4cg/qtspecs/issues/116][#116]]: Clarify the fn:transform function() wrt multiple top-level elements

Proposal: Close without action.

Accepted.

* XML Prague agenda preparation
:PROPERTIES:
:CUSTOM_ID: h-5AA496D5-CADD-45E4-A8AA-614624F8C215
:END:

+ Reminder, who will be there?

  + MK, JLO, RD, ‚Ä¶

+ What do we want to accomplish?

  + MK: Classify open issues and make a decision about how radical we want to be
    in terms of closing the ones deemed inessential
    + Must/Nice/Never!
    + What do with ‚Äúnice to haves‚Äù
  + MK: Second, a few issues we aren‚Äôt going to solve without talking about them
    + Nice to have a feel about whether we think we can solve those
    + Do some whiteboarding‚Ä¶

+ Scheduling?
  + We know some folks won‚Äôt be able to attend, I propose that we schedule an
    hour Zoom call at the end of the day for anyone not present who wants to
    discuss what we‚Äôve decided. Perhaps scheduled at the usual time of
    17:00CEST (16:00BST, 15:00GMT, 11:00EDT)?
    + If so, do we want to meet from 09:00-18:00 or 10:00-18:00 local time?

+ MSM: My gut feeling is that if the network will support it, it would be
  probably be more convenient if everyone entered the zoom call.
+ NW: Should we start at 09:00 or 10:00?

Silence.

+ NW: Then we‚Äôll start at 09:00! 

* Technical Agenda
:PROPERTIES:
:CUSTOM_ID: technical-agenda
:END:

It would be nice to pick off the low-hanging fruit first in preparation for the
face-to-face. I suggest we take the issues in turn, but begin by estimating if
we believe we can close the issue in 10 minutes. If not, move on to the next.
After we‚Äôve processed all the ‚Äúeasy‚Äù ones, we can loop back around to what‚Äôs
left.

** PR #1117: 1116 Add options param to unparsed-text
:PROPERTIES:
:CUSTOM_ID: pr-1117
:END:
See PR [[https://qt4cg.org/dashboard/#pr-1117][#1117]]

+ MK: We have the choice of specifying an encoding or an options map.
  + ‚Ä¶ Some confusion about how that worked in unparsed-text-lines
  + ‚Ä¶ I think that‚Äôs now sorted out.
+ CG: The XQuery code for unparsed-text-lines is wrong
+ MK: I think that‚Äôs now okay.

Proposal: accept this PR.

Accepted.

(We return to this following a question by CG)

+ CG: In 3.1, different newline characters are allowed and automatically normalized
  + ‚Ä¶ Shall we change the default to ‚Äútrue‚Äù so that we‚Äôre backwards compatible?
+ MSM: üëç
+ MK: Thanks for spotting that.

ACTION: QT4CG-078-01: MK to make the default for normalize-newlines on unparsed-text.

** PR #1197: 1192 Allow fn as abbreviation for function
:PROPERTIES:
:CUSTOM_ID: h-FC21A285-E29C-474D-99A8-021A81CAE65F
:END:
See PR [[https://qt4cg.org/dashboard/#pr-1197][#1197]].

+ MK: We already have ~fn~ as an abbreviation in inline functions.
  + ‚Ä¶ This just allows it in normal function declarations.

Proposal: accept this PR.

Accepted.

** PR #1191: 1167, 934 deep equal merge collations param
:PROPERTIES:
:CUSTOM_ID: h-08A874BB-C635-4661-AE68-192D905F7D9F
:END:
See PR [[https://qt4cg.org/dashboard/#pr-1191][#1191]].

+ MK: This is doing the same kind of thing with the options parameter 

(CG projects for MK)

+ MK: Instead of a collation parameter and an options parameter, they‚Äôre combined

Proposal: accept this PR.

Accepted.

** PR #1185: 1179 array:values, map:values ‚Üí contents
:PROPERTIES:
:CUSTOM_ID: pr-1185
:END:
See [[https://qt4cg.org/dashboard/#pr-1185][PR #1185]].

Skipped on first triage pass.

** PR #1062/#1027/#1227: fn:ranks
:PROPERTIES:
:CUSTOM_ID: pr-1062
:END:

See PR [[https://qt4cg.org/dashboard/#pr-1227][#1227]]
See PR [[https://qt4cg.org/dashboard/#pr-1062][#1062]]
See PR [[https://qt4cg.org/dashboard/#pr-1027][#1027]]

Skipped on first triage pass.

** PR #1228: Adding the BLAKE3 hashing algorithm to fn:hash
:PROPERTIES:
:CUSTOM_ID: pr-1228
:END:
See PR [[https://qt4cg.org/dashboard/#pr-1228][#1228]]

+ MK: I have no objection, but that‚Äôs from a position of ignorance as to which
  ones are important enough. It‚Äôs a judgement call.
+ WP: Not an expert on hashing algorithms, but in the context of what people are
  doing is how do things get added or removed from this list.
+ NW: You can support any you want, this is about what‚Äôs in the standard.
+ CG: I have no objection, but what if there are others that could be added? Why
  is this one more important?
+ JLO: As long as there decent Blake3 implementations, then I think there‚Äôs no
  problem. I was hoping for HMAC, for example.
+ DN: Why this one? With this one, we have five. CRC32 and MD5 should be
  uncontroversial. SHA1 and SHA256, which are known to have security exploits.
  Blake3 is the only one without exploits.
  + ‚Ä¶ Finally, I think five is the perfect number. And I think we should do it.
+ CG projects rurban.github.io/smhasher/doc/table.html showing that there are
  many faster algorithms.
+ DN: There are implementations already in Java, C#, and Rust.
+ NW: That‚Äôs true of many, many algorithms. Adding a dependency isn‚Äôty free.
+ CG: I would like to discuss if further.

We‚Äôll continue discussion of this item. Please comment on the issue or in email.

** PR #1219: 1218 Drop use of union(A,B) syntax
:PROPERTIES:
:CUSTOM_ID: pr-1219
:END:
See PR [[https://qt4cg.org/dashboard/#pr-1219][#1219]]

+ MK: It‚Äôs purely editorial, there are places where it still appears in examples
  and it‚Äôs incorrect.

Proposal: accept this PR.

Accepted.

** PR #1217: 1207 Allow numeric predicates when filtering arrays
:PROPERTIES:
:CUSTOM_ID: pr-1217
:END:
See PR [[https://qt4cg.org/dashboard/#pr-1217][#1217]]

+ MK: I resisted this initially, but CG was persuasive.
  + ‚Ä¶ My main reservation was what do you want back for ~[1]~ on an array?
  + ‚Ä¶ Now that you can have multiple numbers, it makes sense to return an array.
  + ‚Ä¶ The implementation required generalizing the ~predicate truth value~ and
    referring to it.
  + ‚Ä¶ You can also use it on maps which is probably useless, but logically
    consistent.

Proposal: accept this PR.

Accepted.

** PR #1213: 1199 Add ellipsis markup for arguments in variadic functions
:PROPERTIES:
:CUSTOM_ID: pr-1213
:END:
See PR [[https://qt4cg.org/dashboard/#pr-1213][#1213]]

+ MK: Displays the way the signature of a variadic function is displays.

Proposal: accept this PR.

Accepted.

** PR #1212: 1208 correct details of formerly-reserved function names
:PROPERTIES:
:CUSTOM_ID: pr-1212
:END:
See PR [[https://qt4cg.org/dashboard/#pr-1212][#1212]]

+ MK: This corrects the history and justification. It‚Äôs purely editorial.

Proposal: accept this PR.

Accepted.

** PR #1211: QT4CG-076-01 Add examples of coercions
:PROPERTIES:
:CUSTOM_ID: pr-1211
:END:
See PR [[https://qt4cg.org/dashboard/#pr-1211][#1211]]

+ MK: This just adds some examples.
+ CG: I noticed some issues in union and choice types, but they‚Äôve been corrected.

Proposal: accept this PR.

Accepted.

** PR #1209: 1183 Add transient mode and the transient{} expression
:PROPERTIES:
:CUSTOM_ID: pr-1209
:END:
See PR [[https://qt4cg.org/dashboard/#pr-1209][#1209]]

+ MK: I‚Äôve tried to remove all the controversy from the discussion.
  + ‚Ä¶ This adds a new expression, ~transient {}~ which sets the static context to transient mode.
  + ‚Ä¶ This relaxes the implementation requirements for functions like
    ~current-dateTime~, ~doc~, etc. so that they are not required to be stable.
  + ‚Ä¶ No obligation on the implementation to do anything different, but it is
    allowed to relax the requirement to deliver the same results every time.
  + ‚Ä¶ There‚Äôs a recommendation about functions that might particularly benefit
    from this treatment.
  + ‚Ä¶ This is basically implementation-defined territory.
+ DN: I‚Äôm wondering who would use this and why if implementations are not
  required to return different results every time? If users can‚Äôt know what will
  happen, why should they use it?
+ MK: If you take the collection function, an implementation of the function
  that access the filestore, the requirement to make the collection stable is
  quite expensive.
  + ‚Ä¶ People are currently using proprietary extensions to say they want
    versions of the function that doesn‚Äôt incur the overhead.
  + ‚Ä¶ This provides a declarative way to address that common use case.
  + ‚Ä¶ Users might do this if they know their implementations will use it.
+ DN: My concern is that if this not an obligation on implementations to change
  their behavior, they won‚Äôt change it.
+ MK: That‚Äôs a valid concern given that the ~unordered~ expression is very
  rarely used. Most users want results ordered most of the time.
  + ‚Ä¶ You can‚Äôt force an implementation to return different results.
  + ‚Ä¶ We can‚Äôt formally model changes in the external environment.

Some discussion of what it means to observe the external. Some discussion of
whether we should use the word ‚Äúshould‚Äù.

+ NW: I think you underestimate how responsive implementors are to customers.
+ JLO: I think ~fn:random-number-generator~ could be added to this list. That
  would make it more approachable by just returning a different value each time
  it‚Äôs called.
  + ‚Ä¶ I‚Äôm also wondering if it‚Äôs implementation-defined that a function like
    ~current-dateTime~ must return different values. It could be really
    problematic if an implementation returns the same value.
+ MK: It‚Äôs just hard to predict the outside world, you can‚Äôt for example,
  determine whether or not caching will happen in the network.
+ MSM: I wanted to say on the issue of encouraged-but-not-required-to versus
  should, ‚Äúshould‚Äù has a defined meaning in conformance. I think that would be a
  better choice here. And consistency helps readers.
+ MK: Okay.
+ WP: I think I agree with that. It‚Äôs a question of whether this should be in
  the specification or should be implementation behavior. It looks like a useful
  thing to have a standard way to say.

ACTION: QT4CG-078-02: MK to update the prose to use the word ‚Äúshould‚Äù.

+ CG: My concerns are similar to DN‚Äôs. I have some doubt that implementors will
  do sufficiently consistent things. Maybe we could try to make it a little
  clearer what changes should be expected. For time measurements we already have
  another issue about that.
  + ‚Ä¶ One example is file append. That function is identified as
    non-deterministic so I wouldn‚Äôt expect ~transient{}~ to change anything.
+ MK: There‚Äôs no determinism required by the specification for file append.

Some discussion of when an implementation might ‚Äúknow‚Äù that a function was
nondeterministic. (Annotations or other API choices, perhaps.)

+ CG: I‚Äôm not sure who would find this advantageous.
  + ‚Ä¶ What happens when a function is invoked through a function pointer, etc.
+ MK: I‚Äôve made it part of the static context. That would make it part of the
  context when the function is created, not invoked.

We‚Äôll continue discussion of this item. Please comment on the PR or in email.

* Any other business
:PROPERTIES:
:CUSTOM_ID: any-other-business
:END:

+ NW: Shall I merge my PR for record descriptions?

Some discussion. General agreement that I should.

+ DN: Do we have a final description of the record type and all it‚Äôs features?
  + ‚Ä¶ I‚Äôd like to rewrite a couple of features using record types, but are they ready?
  + ‚Ä¶ And are there any implementations that support records?
+ MK: Records are pretty stable in the specification except possibly for edge
  cases involving recursive record types.
  + ‚Ä¶ There‚Äôs been a stable implementation Saxon for a while
+ MK: On the public 12.x branch, we‚Äôve stopped adding 4.0 features. We‚Äôre doing
  the work on the 13 branch which isn‚Äôt publicly available.

* Adjourned
:PROPERTIES:
:CUSTOM_ID: adjourned
:END:
