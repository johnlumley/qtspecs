<item>
   <title>Issue #755 created</title>
   <pubDate>2023-10-17T11:15:53Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/755</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-755</guid>
   <description>&lt;div&gt;&lt;p&gt;with expression; chaining and concatenation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;Outdated:&lt;/strong&gt; See remaining discussion.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;We have no expression yet to bind a value to the context value. Such an expression would be useful, among other things, to extend the focus function to sequences (&lt;code&gt;fn { . }&lt;/code&gt;, see #129).&lt;/p&gt;
&lt;p&gt;Here are 3 possible constructs for that, ordered by my personal preference:&lt;/p&gt;
&lt;h3&gt;1. Value Map Expression&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;ValueExpr      ::=  ValidateExpr | ExtensionExpr | ValueMapExpr
ValueMapExpr   ::=  SimpleMapExpr ("~" SimpleMapExpr)*
SimpleMapExpr  ::=  PathExpr ("!" PathExpr)*

(: Example :)
//flower ~ (count(.) || ' flowers: ' || string-join(name, ', '))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The expression would be similar to the simple map expression (which we could rename to item map expression). The following equivalents would then exist for simple FLWOR expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $i in (1 to 5) return string($i)  ≍  (1 to 5) ! string(.)
let $i := (1 to 5) return count($i)   ≍  (1 to 5) ~ count(.)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fn { E }&lt;/code&gt; could be rewritten to &lt;code&gt;fn($c) { $c ~ E }&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;2. Context Value Declaration&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;ContextExpr  ::=  "context" "{" Expr "}" EnclosedExpr

(: Example :)
context { //flower } {
  count(.) || ' flowers: ' || string-join(name, ', ')
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of the first expression defines the context value, the second expression can reference the context.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn { E }&lt;/code&gt; could be rewritten to &lt;code&gt;fn($c) { context { $c } { E } }&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;3. Enhanced FLWOR expression (for the sake of completion)&lt;/h3&gt;
&lt;p&gt;Similar to variables, the dot could be used to bind and reference the context:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;LetBinding  ::=  ("." | ("$" VarName)) TypeDeclaration? ":=" ExprSingle
ForBinding  ::=  ("." | ("$" VarName)) TypeDeclaration? AllowingEmpty? PositionalVar? "in" ExprSingle

(: Example :)
let . := //flower
return count(.) || ' flowers: ' || string-join(name, ', ')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fn { E }&lt;/code&gt; could be rewritten to &lt;code&gt;fn($c) { let . := $c return E }&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Assessment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The first solution looks most appealing to me. I like the analogy with the existing syntax for single items.&lt;/li&gt;
&lt;li&gt;We could choose the second solution if we believe that the expression will be rarely used.&lt;/li&gt;
&lt;li&gt;I‘ve backed away from the third solution; I think it would be too pervasive.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
