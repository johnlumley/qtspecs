<item>
   <title>Issue #501 created</title>
   <pubDate>2023-05-15T09:05:31Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/501</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-501</guid>
   <description>&lt;div&gt;&lt;p&gt;Error handling: Rethrow errors; finally block&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Re-throw errors&lt;/h3&gt;
&lt;p&gt;In https://github.com/qt4cg/qtspecs/pull/493, a function/expression was suggested to re-throw errors:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;try {
  (: wild stuff :)
} catch * {
  module:log($err:description),
  throw($err:map)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Alternatives&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Use and extend the existing error function: &lt;code&gt;fn:error(throw := $err:map)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use an expression: &lt;code&gt;throw $err:map&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In principle, the error information can also be constructed by the user. If we extend &lt;code&gt;fn:error&lt;/code&gt; to also accept a map, it could be used to both throw and re-throw errors:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;try {
  1 + &amp;lt;empty/&amp;gt;
} catch * {
  (: ... :)
  fn:error($err:map)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Missing information in the map could be added as if &lt;code&gt;fn:error&lt;/code&gt; is raised.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $map := map { 'column-number': 12, 'line-number': 3 }
return fn:error(xs:QName('oob'), 'Out of bounds', map := $map)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Finally clause&lt;/h3&gt;
&lt;p&gt;It can be helpful to have a code block that is always executed, even if errors occur:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $tmp := file:create-temp-file()
return try {
  (: I/O stuff :)
} finally {
  file:delete($tmp)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
