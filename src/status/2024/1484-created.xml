<item>
   <title>Issue #1484 created</title>
   <pubDate>2024-10-08T08:47:52Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1484</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1484</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions that expect a record type should make it extensible&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In general a function (or other operation, e.g. an XSLT instruction) that expects a record type as input should make that record type extensible. For example, &lt;code&gt;array:of-members&lt;/code&gt; should accept &lt;code&gt;record(value as item()*, *)&lt;/code&gt; rather than &lt;code&gt;record(value as item()*)&lt;/code&gt; as currently defined; similarly &lt;code&gt;map:of-pairs&lt;/code&gt; should accept &lt;code&gt;record(key, value, *)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Two reasons: (a) it avoids the user having to remove extraneous fields from records if they happen to be present, and (b) it avoids the system having to check whether extraneous fields are present.&lt;/p&gt;
&lt;p&gt;For example, it now becomes legal (and perhaps sometimes useful) to write &lt;code&gt;array:of-members(map:pairs($map))&lt;/code&gt;; currently this fails because the result of &lt;code&gt;map:pairs&lt;/code&gt; includes &lt;code&gt;key&lt;/code&gt; fields which &lt;code&gt;array:of-members&lt;/code&gt; does not permit.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
