<item>
   <title>Issue #1392 created</title>
   <pubDate>2024-08-18T20:57:43Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1392</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1392</guid>
   <description>&lt;div&gt;&lt;p&gt;`element(a|b)` vs `(element(a)|element(b))`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have introduced two syntax extensions which achieve the same effect:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;element(a|b)&lt;/code&gt; vs &lt;code&gt;(element(a)|element(b))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Do we actually want both?&lt;/p&gt;
&lt;p&gt;If we do, I would suggest that we define &lt;code&gt;element(a|b)&lt;/code&gt; as a shorthand for &lt;code&gt;(element(a)|element(b))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Are they actually equivalent? I think it's fairly clear that they match the same items. It's less clear what the subtyping rules have to say. I think each is a subtype of the other, which means they are substitutable for each other in a function signature, but it needs a lot of digging in the spec to demonstrate this. Are they equivalent from the point of view of coercion rules? I think they probably are, because no coercion actually takes place when the required type is a node type.&lt;/p&gt;
&lt;p&gt;So I think there's no technical bug here just a lack of clarity. It would be easier (assuming we want to retain the syntax at all) if we defined &lt;code&gt;element(a|b)&lt;/code&gt; as a shorthand for &lt;code&gt;(element(a)|element(b))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Minor editorial issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In 3.2.7.2 example 5 is incorrect -- &lt;code&gt;element(xhtml:*|svg:*|mathml|*)&lt;/code&gt; - the last &lt;code&gt;|&lt;/code&gt; should be &lt;code&gt;:&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the changes section of 3.2.7.2, the &lt;code&gt;element(A|B)&lt;/code&gt; syntax is not mentioned.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
