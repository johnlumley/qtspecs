<item>
   <title>Issue #1379 created</title>
   <pubDate>2024-08-12T11:30:16Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1379</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1379</guid>
   <description>&lt;div&gt;&lt;p&gt;Circular dependencies: XQDY0054 vs. XPST0008 vs. optional errors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It remains a challenge (for me) to understand how the specification expects implementations to handle circular dependencies. Sorry in advance for mixing up the specification, tests and the behavior of Saxon (it basically demonstrates my confusion):&lt;/p&gt;
&lt;h3&gt;Error Codes&lt;/h3&gt;
&lt;p&gt;The definition of &lt;code&gt;err:XPST0008&lt;/code&gt; is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#dt-static-error"&gt;static error&lt;/a&gt; if an expression refers to an element name, attribute name, schema type name, namespace prefix, or variable name that is not defined in the &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#dt-static-context"&gt;static context&lt;/a&gt;, except for an ElementName in an &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#doc-xquery40-ElementTest"&gt;ElementTest&lt;/a&gt; or an AttributeName in an &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#doc-xquery40-AttributeTest"&gt;AttributeTest&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The definition of &lt;code&gt;err:XQDY0054&lt;/code&gt; is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#dt-dynamic-error"&gt;dynamic error&lt;/a&gt; if a cycle is encountered in the definition of a module’s dynamic context components, for example because of a cycle in variable declarations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Queries&lt;/h3&gt;
&lt;p&gt;The following test case &lt;a href="https://github.com/qt4cg/qt4tests/blob/4659dfdcc92ac57c9a7f482a1ec9f3f509020f52/prod/VarDecl.xml#L1527C21-L1537"&gt;K-InternalVariablesWith-15b&lt;/a&gt; expects &lt;code&gt;XPST0008&lt;/code&gt; as error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare variable $var1 := $var1;
true()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would expect &lt;code&gt;XQDY0054&lt;/code&gt; as error, and &lt;code&gt;true()&lt;/code&gt; to be a valid alternative, as &lt;code&gt;$var1&lt;/code&gt; is indeed defined in the static context. Think of a similar query (for which I would as well expect &lt;code&gt;XQDY0054&lt;/code&gt; or &lt;code&gt;true()&lt;/code&gt; to be correct results):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare variable $var1 := $var2;
declare variable $var2 := $var1;
true()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Saxon outputs  the following error for the first query…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[XPST0008] Circular definition of global variable: $var1 uses $var1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…which is confusing in itself, as the error code and the message do not really match. The output of the second query is consistent:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[XQDY0054] Circular definition of global variable: $var2 uses $var1, which uses $var2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another test case that expects &lt;code&gt;XQDY0054&lt;/code&gt; is &lt;a href="https://github.com/qt4cg/qt4tests/blob/4659dfdcc92ac57c9a7f482a1ec9f3f509020f52/prod/VarDecl.xml#L1582-L1591"&gt;K-InternalVariablesWith-17a&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare variable $var := local:func1();
declare function local:func1() { local:func2($var) };
declare function local:func2($arg2) { 1 };
true()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, I would expect &lt;code&gt;true()&lt;/code&gt; to be a valid alternative, in &lt;code&gt;K-InternalVariablesWith-17&lt;/code&gt; (the original XQuery 1.0 test), the rational for reporting an error was…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A prolog variable having a circular dependency, by having a variable reference in a call site argument. This is an error even though the variable isn't used, because implementations cannot skip reporting static errors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…but we now have a dynamic error.&lt;/p&gt;
&lt;h3&gt;Suggestions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;XPST0008&lt;/code&gt; should only be raised if no declaration exists for that variable in the query prolog.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XQDY0054&lt;/code&gt; should be optional for cases in which the affected code is never evaluated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would like to hear some feedback on this, and I will be happy to move the corresponding questions to &lt;code&gt;qt4tests&lt;/code&gt; and/or the Saxon bug tracker if we believe that the spec is comprehensive enough.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
