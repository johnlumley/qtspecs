<item>
   <title>Issue #1311 created</title>
   <pubDate>2024-06-30T22:02:53Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1311</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1311</guid>
   <description>&lt;div&gt;&lt;p&gt;Tokenization and element constructors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The new rules in Appendix A.3 on tokenization are, I believe, a great improvement on what went before. But I think there is one thing missing: they claim that the rules allow you to identify boundaries between tokens unambiguously independently of the syntactic context, but in the case of a token starting with &lt;code&gt;&amp;lt;&lt;/code&gt;, this isn't true: to distinguish whether &lt;code&gt;&amp;lt;&lt;/code&gt; represents a less-than-operator (or &lt;code&gt;&amp;lt;=&lt;/code&gt; operator) or whether it is the start of an element constructor, you need some context information.&lt;/p&gt;
&lt;p&gt;Saxon's tokenization is still based on the principles outlined in the XPath 1.0 spec where tokens are disambiguated based on the immediately preceding and following tokens; this is becoming increasingly unviable. Most cases can be handled instead by moving the disambiguation into the parser rather than the tokenizer, but this relies on being able to find token boundaries without knowledge of context (as described in the 4.0 spec), which appears to be possible in all cases except &lt;code&gt;&amp;lt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Essentially we need to add an exception to the rule: &lt;em&gt;"If the current position is not the end of the input, then return the longest [literal terminal]( or [variable terminal] that can be matched starting at the current position..."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I think the exception might be formulated as follows:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In XQuery, when the next character is &lt;code&gt;&amp;lt;&lt;/code&gt; and this is immediately followed by an NCNameStart character (for example &lt;code&gt;X&lt;/code&gt;) the next token could be either a less than operator, or a DirElemConstructor. The "longest terminal" rule cannot reliably distinguish these cases. Instead, the decision must take into account the syntactic context. A DirElemConstructor can only appear where the parser is expecting to read an expression, while the less-than operator can never appear where the parser is expecting an expression. This aspect of the syntactic context therefore needs to be communicated from the parser to the tokenizer.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, the two cases might be distinguished by backtracking. The tokenizer could attempt to interpret the text following the &lt;code&gt;&amp;lt;&lt;/code&gt; character as a DirElemConstructor, and revert to the alternative interpretation if this fails.&lt;/p&gt;
&lt;p&gt;Note: this was not explained clearly in 3.1. Perhaps it was covered by the quixotic phrase "the longest token consistent with the EBNF".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
