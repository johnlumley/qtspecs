<item>
   <title>Issue #1274 created</title>
   <pubDate>2024-06-14T09:44:02Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1274</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1274</guid>
   <description>&lt;div&gt;&lt;p&gt;Further refinement of fn:round()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've been adding tests and an implementation of the changes to fn:round() which now allow control of midpoint rounding, and this generates some thoughts.&lt;/p&gt;
&lt;p&gt;Firstly, we're using the rounding modes "floor" and "ceiling" with a different meaning from Java class RoundingMode, which may confuse some users. In our spec, these only affect handling of midpoint values, whereas in Java they affect all values, for example rounding 1.7 with rounding mode "floor" gives 1.0.&lt;/p&gt;
&lt;p&gt;Secondly, the function library only offers &lt;code&gt;fn:floor()&lt;/code&gt; and &lt;code&gt;fn:ceiling()&lt;/code&gt; to an integer. There's no way, for example, of rounding 1.9997 to 1.999 (which happens to be what we do in &lt;code&gt;format-time()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;So I propose that we extend the set of rounding modes to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;floor - towards negative infinity&lt;/li&gt;
&lt;li&gt;ceiling - towards positive infinity&lt;/li&gt;
&lt;li&gt;toward-zero - towards zero (i.e. truncate)&lt;/li&gt;
&lt;li&gt;away-from-zero - away from zero&lt;/li&gt;
&lt;li&gt;half-to-floor - to nearest, or floor if at midpoint&lt;/li&gt;
&lt;li&gt;half-to-ceiling - to nearest, or ceiling if at midpoint&lt;/li&gt;
&lt;li&gt;half-toward-zero - to nearest, or toward zero if at midpoint&lt;/li&gt;
&lt;li&gt;half-away-from-zero - to nearest, or away from zero if at midpoint&lt;/li&gt;
&lt;li&gt;half-to-even - to nearest, or to even if at midpoint&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
