<item>
   <title>Issue #1376 created</title>
   <pubDate>2024-08-12T07:35:43Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1376</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1376</guid>
   <description>&lt;div&gt;&lt;p&gt;User defined operators&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This came up on stack overflow and is probable worth a few comments on.&lt;/p&gt;
&lt;p&gt;The motivation was actually to implement something called applicative style programming, but the essence of it, is it requires operators.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/78851758/user-defined-xpath-operators-in-xslt/78856925?noredirect=1#comment139036715_78856925"&gt;stack overflow question&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The simplest (to me) mechanism is the one used in Haskell (to turn a function into an operator) whereby&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.haskell.org/Infix_operator"&gt;haskell backtick mechanism&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; let concatPrint x y = putStrLn $ (++) x y
Prelude&amp;gt; concatPrint "a" "b"
ab
Prelude&amp;gt; "a" `concatPrint` "b"
ab

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the 1st line defines a function
the 2nd line calls the function
the 3rd line uses the function as a operator by wrapping it in backticks.&lt;/p&gt;
&lt;p&gt;I don't believe anything 'clever' happens its simply a mechanical rewriting of the expressions before its parsed.
As Haskell is curried it generalises naturally to n parameters, in XPath you'd probably restrict it to two (and  maybe one) parameters.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
