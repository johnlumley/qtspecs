<item>
   <title>Issue #1389 created</title>
   <pubDate>2024-08-15T09:02:55Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1389</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1389</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:while-do: Optional error: will not terminate&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In many cases, a compiler may detect that a &lt;code&gt;fn:while-do&lt;/code&gt; or &lt;code&gt;fn:do-until&lt;/code&gt; function call will not terminate. Trivial examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;while-do((), true#0, identity#1)
while-do((), exists#1, fn($c) { $c, $c }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We should add a fixed error code that an implementation sʜᴏᴜʟᴅ (or ᴍᴀʏ?) raise when it encounters such a case. The error can be raised statically (e.g., as the result of type checks) or dynamically (when the input is not known at compile time). We could reuse &lt;code&gt;XQDY0054&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In principle, the error code could also be used to reject non-terminating recursive functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function local:rec() { local:rec() };
local:rec()

declare function local:duplicate($input) {
  if(exists($input)) then $input else local:duplicate(($input, $input))
};
local:duplicate(())

let $oh := fn($my) { $my($my) }
return $oh($oh)

(: if we legalize this, see #1379 :)
declare variable $rec := fn() { $rec };
$rec()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
