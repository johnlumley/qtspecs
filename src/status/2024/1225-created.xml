<item>
   <title>Issue #1225 created</title>
   <pubDate>2024-05-18T08:33:50Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1225</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1225</guid>
   <description>&lt;div&gt;&lt;p&gt;Generalization of Deep Updates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is a discussion issue, as I cannot contribute something substantial so far.&lt;/p&gt;
&lt;h3&gt;Observations&lt;/h3&gt;
&lt;p&gt;Our current development to support updates in the languages may come as a surprise to developers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The XQuery core specification (which includes &lt;strong&gt;X&lt;/strong&gt; in its name) will include constructs for updating &lt;strong&gt;Maps&lt;/strong&gt; and &lt;strong&gt;Arrays&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;To update &lt;strong&gt;XML&lt;/strong&gt;, an implementation must support the XQuery Update (XQUF) specification.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think we should…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;either embed map/array updates in XQUF, or&lt;/li&gt;
&lt;li&gt;support a modified subset of XQUF in our core specs (while remaining fully compatible with XQUF).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I believe 2. is more realistic. By providing a simplified syntax, we could tackle some of the shortcomings of XQUF, such as its verbosity, and seemingly unnecessary restrictions:&lt;/p&gt;
&lt;h3&gt;XQUF: Verbosity&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;Transform&lt;/em&gt; expression (or &lt;em&gt;Copy Modify&lt;/em&gt; expression, as it’s called in 3.0) has a cumbersome and wordy syntax for doing very trivial things:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;copy $node := &amp;lt;a&amp;gt;&amp;lt;b/&amp;gt;&amp;lt;/a&amp;gt;
modify delete node $node/b
return $node
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The 3.0 &lt;em&gt;Transform With&lt;/em&gt; syntax is a bit simpler, it utilizes the context item:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;a&amp;gt;&amp;lt;b/&amp;gt;&amp;lt;/a&amp;gt; transform with {
  delete node ./b
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It resulted from the BaseX &lt;code&gt;update&lt;/code&gt; syntax…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;a&amp;gt;&amp;lt;b/&amp;gt;&amp;lt;/a&amp;gt; update {
  delete node ./b
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…which comes with an ambiguity that forbids its unchanged adoption: &lt;code&gt;element update {}&lt;/code&gt; could be both an element constructor and an update statement. I think that dropping the curly braces (and, optionally, using parentheses) would resolve this issue.&lt;/p&gt;
&lt;h3&gt;XQUF: Restrictions&lt;/h3&gt;
&lt;p&gt;The XQUF syntax is very powerful, but it has some restrictions that require the use of FLWOR expressions when addressing multiple nodes. For example, the following statement is illegal…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;replace //village with &amp;lt;village/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…if the target is not a single node, which means that you have to write…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $v in //village
return replace $v with &amp;lt;village/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…or…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: only supported in BaseX :)
//village ! (replace . with &amp;lt;village/&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’m pretty sure it would be safe to drop the restriction, which also exists for other update expressions, such as &lt;code&gt;insert nodes NODES into SINGLE-NODE&lt;/code&gt; or &lt;code&gt;rename node NODE as 'NAME'&lt;/code&gt; (&lt;code&gt;delete nodes NODES&lt;/code&gt; is legal). Allowing multiple targets would greatly reduce the number of iterations required within update blocks in practice.&lt;/p&gt;
&lt;h3&gt;XQuery Update &lt;em&gt;light&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;I think the new update syntax should meet the following requirements (among others):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compatible with the XQUF node semantics.&lt;/li&gt;
&lt;li&gt;Similar syntax for supported input types.&lt;/li&gt;
&lt;li&gt;Chaining of update operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, we would need to decide on a syntax that would be applicable to both maps/arrays and nodes. We could:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build on the proposal in &lt;a href="https://github.com/qt4cg/qtspecs/pull/832"&gt;#832&lt;/a&gt;, which introduces a new syntax for maps and arrays, and  extend it for nodes:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;update map   INPUT-MAP   { ... }
update array INPUT-ARRAY { ... }
update node  INPUT-NODE  { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Build on XQUF 3.0:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;INPUT-MAP   transform with { ... }
INPUT-ARRAY transform with { ... }
INPUT-NODE  transform with { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Build on BaseX (allowing multiple input items and chains):&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;INPUT-MAPS   update (...) update (...)
INPUT-ARRAYS update (...) update (...)
INPUT-NODES  update (...) update (...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Syntax 2. and 3. is challenging, as the type of the input can only be evaluated at time (and for XQUF it has to be determined statically whether an expression is an updating or non-updating).&lt;/p&gt;
&lt;p&gt;As we currently have a proposal for 1., I will stick to that syntax, but allow an optional plural form for &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;array&lt;/code&gt; (inspired by XQUF), and use chains. Within the the update block, we could now use the short syntax also for nodes without the &lt;code&gt;node&lt;/code&gt;/&lt;code&gt;nodes&lt;/code&gt; keywords:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;update map $country-map {
  delete ??entry:city
},
update maps $country-maps update {
  rename ?entry:village as 'city'
},

update node $country-node {
  delete //city
},
update nodes $country-nodes {
  insert &amp;lt;lakes/&amp;gt; into .,
  insert &amp;lt;mountains/&amp;gt; into .
} {
  insert &amp;lt;lake/&amp;gt; into //lakes
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Semantics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Note that for XQUF update expressions it makes a difference whether multiple expressions are defined with the same block or in a subsequent block – which is why I think chains are essential.&lt;/li&gt;
&lt;li&gt;Even though the syntax would be similar for node and map/array updates, the inherent semantics would differ a lot – which is something, however, users would not need to care about too much: Node updates would greatly rely on XQUF, whereas map/array updates would be based on the new proposal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m looking forward to everyone’s opinions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
