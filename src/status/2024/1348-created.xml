<item>
   <title>Issue #1348 created</title>
   <pubDate>2024-07-25T09:18:48Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1348</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1348</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar rules: redundancies&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I’m a humble user of our grammar rules, and I’m definitely not an expert when it comes to their definition (my main obstacle is that changes to the XQuery grammar rules need to be compatible with the XPath and possibly XSLT grammars).&lt;/p&gt;
&lt;p&gt;What made it difficult for me to read them in the past were the numerous redundancies (with some of them attached). Is this just “history”, or are there particular reasons for preserving or even enforcing redundance? I noticed that, sometimes, symbol names are used in the prose, but I failed to detect any reasonable pattern.&lt;/p&gt;
&lt;p&gt;Do we believe it would be helpful to clean up the grammar rules, or does it rather feel out of scope?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# currently
ParamWithDefault ::="$" EQName TypeDeclaration? (":=" StandaloneExpr)?
Param ::= "$" EQName TypeDeclaration?
# could be
ParamWithDefault ::= Param (":=" StandaloneExpr)?`
Param ::= "$" EQName TypeDeclaration?

# currently
SchemaAttributeTest ::= "schema-attribute" "(" AttributeDeclaration ")" 
AttributeDeclaration ::= AttributeName 
AttributeName ::= EQName 
# could be
SchemaAttributeTest ::= "schema-attribute" "(" EQName ")" 

# currently
WindowVars ::= ("$" CurrentItem)? PositionalVar? ("previous" "$" PreviousItem)? ("next" "$" NextItem)?
CurrentItem ::= EQName
PreviousItem ::= EQName
NextItem ::= EQName
LetBinding ::= "$" VarName TypeDeclaration? ":=" StandaloneExpr
PositionalVar ::= "at" "$" VarName
VarName ::= EQName
VarRef ::= "$" VarName
# could be
WindowVars ::= ("$" EQName)? PositionalVar? ("previous" Var)? ("next" Var)?
LetBinding ::= Var TypeDeclaration? ":=" StandaloneExpr
PositionalVar ::= "at" Var
VarRef ::= Var
Var := "$" EQName

# currently
MapConstructorEntry ::= MapKeyExpr ":" MapValueExpr
MapKeyExpr ::= ExprSingle
MapValueExpr ::= StandaloneExpr
# could be
MapConstructorEntry ::= ExprSingle ":" StandaloneExpr

# currently
ForwardAxis ::= ("child" "::") | ("descendant" "::") | ("attribute" "::") | ("self" "::") |
  ("descendant-or-self" "::") | ("following-sibling" "::") | ("following" "::")
# could be
ForwardAxis ::= ("attribute" | "child" | "descendant" | "descendant-or-self" |
  "following" | "following-sibling" | "self") "::"

# currently
CompNamespaceConstructor ::= "namespace" (Prefix | EnclosedPrefixExpr) EnclosedURIExpr
Prefix ::= NCName
EnclosedPrefixExpr ::= EnclosedExpr
# could be
CompNamespaceConstructor ::= "namespace" (NCName | EnclosedExpr) EnclosedURIExpr

# currently
Argument ::= StandaloneExpr | ArgumentPlaceholder
ArgumentPlaceholder ::= "?"
# could be
Argument ::= StandaloneExpr | "?"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and so on.&lt;/p&gt;
&lt;p&gt;PS: If we tweak the grammar, I would propose to rename &lt;code&gt;ExprSingle&lt;/code&gt; to &lt;code&gt;SingleExpr&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
