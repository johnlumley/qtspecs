<item>
   <title>Issue #1240 created</title>
   <pubDate>2024-05-23T16:34:09Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1240</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1240</guid>
   <description>&lt;div&gt;&lt;p&gt;$sequence-of-maps ? info()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We're increasingly using the design pattern where maps contain entries that are function items. If &lt;code&gt;$map&lt;/code&gt; is a map and it has an entry &lt;code&gt;info&lt;/code&gt; that is a zero-arity function, then &lt;code&gt;$map ? info()&lt;/code&gt; invokes the function. This looks appealingly as if it's a method application applying the method &lt;code&gt;info()&lt;/code&gt; on the object &lt;code&gt;$map&lt;/code&gt;, but that's not actually what's really going on underneath. What is really happening is that we evaluate &lt;code&gt;($map ? info)&lt;/code&gt; which yields a function item, and then we dynamically call this function.&lt;/p&gt;
&lt;p&gt;Now what if &lt;code&gt;$maps&lt;/code&gt; is a sequence of maps each of which has an &lt;code&gt;info&lt;/code&gt; field? This parses as &lt;code&gt;($maps ? info)()&lt;/code&gt;. &lt;code&gt;$maps ? info&lt;/code&gt; returns a sequence of function items, and a dynamic function call can't be applied to a sequence of functions items. Instead you have to write &lt;code&gt;($maps ? info)!.()&lt;/code&gt; which feels fairly bizarre.&lt;/p&gt;
&lt;p&gt;Should we allow the LHS of a dynamic function call to be a sequence? On the whole, I don't tend to like operations to do implicit mapping over one of the arguments, but I feel like this might warrant an exception. The justification is that a dynamic function call is a postfix expression, and all the other postfix expressions accept a sequence on the LHS. Thoughts please.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
