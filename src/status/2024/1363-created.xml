<item>
   <title>Issue #1363 created</title>
   <pubDate>2024-08-02T09:00:03Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1363</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1363</guid>
   <description>&lt;div&gt;&lt;p&gt;map:get and array:get&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I find the callback/fallback arguments to &lt;code&gt;map:get&lt;/code&gt; and &lt;code&gt;array:get&lt;/code&gt; rather unsatisfactory. They complicate the specification, and the use cases and examples are tenuous. I don't think they offer a great deal of convenience over alternative ways of achieving the same effect.&lt;/p&gt;
&lt;p&gt;I would like to propose scrapping these arguments, reverting to the 3.1 specification, and adding a new pair of functions &lt;code&gt;map:try-get()&lt;/code&gt; and &lt;code&gt;array:try-get()&lt;/code&gt; with a return type of &lt;code&gt;record(found as xs:boolean, value? as item()*)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The specification for map:try-get($map, $key) is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (map:contains($map, $key))
then {"found":true(), "value":map:get($map, $key)}
else {"found":false()}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The specification for array:try-get($array, $index) is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ($index = 1 to array:size($array))
then {"found":true(), "value":array:get($map, $index)}
else {"found":false()}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Though it would probably be better to define it the other way around, that is define &lt;code&gt;*:get&lt;/code&gt; in terms of &lt;code&gt;*:try-get&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The name &lt;code&gt;try-get&lt;/code&gt; comes from C#. I'm not immensely enthusiastic about it, but it will get some name recognition. I would probably prefer &lt;code&gt;test-get&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One of the aims, of course, is to enable you to find whether a value exists and get the value in a single call to the map (so the key only gets hashed once, for example). This benefit will only materialise if &lt;code&gt;?found&lt;/code&gt; and &lt;code&gt;?value&lt;/code&gt; are implemented without requiring another full map lookup, that is if access to fixed fields in simple record types is optimised. That's a challenge we leave to implementors. We're not quite there yet in Saxon - we do have a map implementation in which the fields occupy fixed slot positions, but the static inferencing to reference fields by slot number isn't quite there yet.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
