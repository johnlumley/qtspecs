buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://dev.saxonica.com/maven"
    }
  }

  dependencies {
    classpath group: "com.saxonica", name: "Saxon-EE", version: "11.4"
  }
}

plugins {
  id "java"
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "https://dev.saxonica.com/maven"
  }
}

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01'
  }
}

configurations {
  saxon.extendsFrom(implementation)
}

// Set saxonLicenseDir in gradle.properties, or from the
// command line if you have a license in some other place.
if (!hasProperty("saxonLicenseDir")) {
  ext.saxonLicenseDir=System.getenv('HOME') + "/java"
}

dependencies {
  implementation (
    [group: "com.saxonica", name: "Saxon-EE", version: "11.4"],
    [group: "com.nwalsh", name: "scommonmark", version: "0.0.1"]
  )
  saxon (
    files(saxonLicenseDir)
  )
}

// ============================================================

defaultTasks 'showhelp'

task showhelp() {
  doLast {
    println("The compileXslt task will recompile the dashboard.")
    println("The rss task will rebuild the RSS feed.");
    println("The dashboard task will rebuild the dashboard.");
  }
}

// ============================================================

task toot(
  dependsOn: ["rss"]
) {
  // This task probably only works in CI and/or on Norm's system
  // The idea is that it toots updates when the RSS feed changes
  outputs.upToDateWhen { false }
  if (new File("${projectDir}/@qt4cg/qt4cg.json").exists()) {
    doLast {
      exec {
        commandLine "autotoot", "--config", "${projectDir}/@qt4cg/qt4cg.json"
      }
    }
  }
}

task rss(
  type: JavaExec,
  dependsOn: ["updateIssues"]
) {
  inputs.files fileTree(dir: "${projectDir}/src/status",
                        include: '20*/*')
  inputs.file "${projectDir}/src/status/status-rss.xsl"
  outputs.file "${projectDir}/@qt4cg/status.rss"
  
  classpath = configurations.saxon
  mainClass = "com.saxonica.Transform"
  args "-it", "-xsl:${projectDir}/src/status/status-rss.xsl"
}

task updateIssues(
  type: JavaExec,
  dependsOn: ["updateLocalIssues"]
) {
  inputs.file "${projectDir}/src/status/qtspecs-issues.json"
  inputs.file "${projectDir}/src/status/issues.xsl"
  outputs.files fileTree(dir: "${projectDir}/src/status",
                         include: '20*/*')
  
  classpath = configurations.saxon
  mainClass = "com.saxonica.Transform"
  args "-it", "-xsl:${projectDir}/src/status/issues.xsl",
    '-init:com.nwalsh.commonmark.Register'
}

task updateAvailablePRs(
  type: JavaExec,
  dependsOn: ["updateLocalIssues", "updateIssues"]
) {
  inputs.file "${projectDir}/src/status/qtspecs-issues.json"
  inputs.file "${projectDir}/src/status/available-prs.xsl"
  outputs.file "${projectDir}/available-prs.html"
  
  classpath = configurations.saxon
  mainClass = "com.saxonica.Transform"
  args "-it",
    "-xsl:${projectDir}/src/status/available-prs.xsl",
    "-o:${projectDir}/available-prs.html"
}

task updateLocalIssues() {
  finalizedBy updateAvailablePRs

  def issues = project.file("${projectDir}/src/status/qtspecs-issues.json")
  def update = true
  if (issues.exists()) {
    def now = new Date().getTime();
    def age_sec = (now - issues.lastModified()) / 1000
    update = age_sec > 3600
  }

  if (update) {
    doLast {
      exec {
        workingDir "${projectDir}/src/status"
        commandLine "/bin/sh", "./get-qt4cg-issues.sh", "qtspecs-issues.json"
      }
    } 
  } else {
    doLast {
      println("Issues file is too recent, erase it to force update.")
    }
  }
}

// ============================================================

task prlist(type: Exec) {
  inputs.dir "${projectDir}/pr"
  outputs.file "/tmp/pr-list.txt"

  def recordBranch = new FileOutputStream(new File("/tmp/pr-list.txt"))
  standardOutput = recordBranch
  commandLine "find", "pr", "-type", "f", "-print"
}

task dashboard(type: JavaExec,
               dependsOn: ["prlist"]
) {
  inputs.file "${projectDir}/dashboard/static.xsl"
  outputs.file "${projectDir}/dashboard/index.html"
  classpath = configurations.saxon
  mainClass = "com.saxonica.Transform"
  args "-it",
    "-xsl:${projectDir}/dashboard/static.xsl",
    "-o:${projectDir}/dashboard/index.html"
}

// ============================================================

if (file(saxonLicenseDir + "/saxon-license.lic").exists()) {
  // We can compile the stylesheet
  task compileXslt(type: JavaExec) {
    inputs.file "${projectDir}/dashboard/dashboard.xsl"
    outputs.file "${projectDir}/dashboard/dashboard.sef.json"
    classpath = configurations.saxon
    mainClass = "com.saxonica.Transform"
    args "-t",
      "-xsl:${projectDir}/dashboard/dashboard.xsl",
      "-export:${projectDir}/dashboard/dashboard.sef.json",
      "-target:JS", "-nogo", "-relocate:on", "-ns:##html5"
  }
} else {
  task compileXslt() {
    doLast {
      throw new GradleException("Failed to find Saxon license.")
    }
  }
}
